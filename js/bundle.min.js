! function(t, i, e, s) {
    "use strict";

    function o(i, e) {
        this.element = i, this.$context = t(i).data("api", this), this.$layers = this.$context.find(".layer");
        var s = {
            calibrateX: this.$context.data("calibrate-x") || null,
            calibrateY: this.$context.data("calibrate-y") || null,
            invertX: this.$context.data("invert-x") || null,
            invertY: this.$context.data("invert-y") || null,
            limitX: parseFloat(this.$context.data("limit-x")) || null,
            limitY: parseFloat(this.$context.data("limit-y")) || null,
            scalarX: parseFloat(this.$context.data("scalar-x")) || null,
            scalarY: parseFloat(this.$context.data("scalar-y")) || null,
            frictionX: parseFloat(this.$context.data("friction-x")) || null,
            frictionY: parseFloat(this.$context.data("friction-y")) || null,
            originX: parseFloat(this.$context.data("origin-x")) || null,
            originY: parseFloat(this.$context.data("origin-y")) || null
        };
        for (var o in s) null === s[o] && delete s[o];
        t.extend(this, r, e, s), this.calibrationTimer = null, this.calibrationFlag = !0, this.enabled = !1, this.depths = [], this.raf = null, this.bounds = null, this.ex = 0, this.ey = 0, this.ew = 0, this.eh = 0, this.ecx = 0, this.ecy = 0, this.erx = 0, this.ery = 0, this.cx = 0, this.cy = 0, this.ix = 0, this.iy = 0, this.mx = 0, this.my = 0, this.vx = 0, this.vy = 0, this.onMouseMove = this.onMouseMove.bind(this), this.onDeviceOrientation = this.onDeviceOrientation.bind(this), this.onOrientationTimer = this.onOrientationTimer.bind(this), this.onCalibrationTimer = this.onCalibrationTimer.bind(this), this.onAnimationFrame = this.onAnimationFrame.bind(this), this.onWindowResize = this.onWindowResize.bind(this), this.initialise()
    }
    var n = "parallax",
        a = 30,
        r = {
            relativeInput: !1,
            clipRelativeInput: !1,
            calibrationThreshold: 100,
            calibrationDelay: 500,
            supportDelay: 500,
            calibrateX: !1,
            calibrateY: !0,
            invertX: !0,
            invertY: !0,
            limitX: !1,
            limitY: !1,
            scalarX: 10,
            scalarY: 10,
            frictionX: .1,
            frictionY: .1,
            originX: .5,
            originY: .5
        };
    o.prototype.transformSupport = function(t) {
        for (var o = e.createElement("div"), n = !1, a = null, r = !1, h = null, l = null, p = 0, c = this.vendors.length; c > p; p++)
            if (null !== this.vendors[p] ? (h = this.vendors[p][0] + "transform", l = this.vendors[p][1] + "Transform") : (h = "transform", l = "transform"), o.style[l] !== s) {
                n = !0;
                break
            }
        switch (t) {
            case "2D":
                r = n;
                break;
            case "3D":
                if (n) {
                    var m = e.body || e.createElement("body"),
                        u = e.documentElement,
                        y = u.style.overflow;
                    e.body || (u.style.overflow = "hidden", u.appendChild(m), m.style.overflow = "hidden", m.style.background = ""), m.appendChild(o), o.style[l] = "translate3d(1px,1px,1px)", a = i.getComputedStyle(o).getPropertyValue(h), r = a !== s && a.length > 0 && "none" !== a, u.style.overflow = y, m.removeChild(o)
                }
        }
        return r
    }, o.prototype.ww = null, o.prototype.wh = null, o.prototype.wcx = null, o.prototype.wcy = null, o.prototype.wrx = null, o.prototype.wry = null, o.prototype.portrait = null, o.prototype.desktop = !navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry|BB10|mobi|tablet|opera mini|nexus 7)/i), o.prototype.vendors = [null, ["-webkit-", "webkit"],
        ["-moz-", "Moz"],
        ["-o-", "O"],
        ["-ms-", "ms"]
    ], o.prototype.motionSupport = !!i.DeviceMotionEvent, o.prototype.orientationSupport = !!i.DeviceOrientationEvent, o.prototype.orientationStatus = 0, o.prototype.transform2DSupport = o.prototype.transformSupport("2D"), o.prototype.transform3DSupport = o.prototype.transformSupport("3D"), o.prototype.propertyCache = {}, o.prototype.initialise = function() {
        "static" === this.$context.css("position") && this.$context.css({
            position: "relative"
        }), this.accelerate(this.$context), this.updateLayers(), this.updateDimensions(), this.enable(), this.queueCalibration(this.calibrationDelay)
    }, o.prototype.updateLayers = function() {
        this.$layers = this.$context.find(".layer"), this.depths = [], this.$layers.css({
            position: "absolute",
            display: "block",
            left: 0,
            top: 0
        }), this.$layers.first().css({
            position: "relative"
        }), this.accelerate(this.$layers), this.$layers.each(t.proxy(function(i, e) {
            this.depths.push(t(e).data("depth") || 0)
        }, this))
    }, o.prototype.updateDimensions = function() {
        this.ww = i.innerWidth, this.wh = i.innerHeight, this.wcx = this.ww * this.originX, this.wcy = this.wh * this.originY, this.wrx = Math.max(this.wcx, this.ww - this.wcx), this.wry = Math.max(this.wcy, this.wh - this.wcy)
    }, o.prototype.updateBounds = function() {
        this.bounds = this.element.getBoundingClientRect(), this.ex = this.bounds.left, this.ey = this.bounds.top, this.ew = this.bounds.width, this.eh = this.bounds.height, this.ecx = this.ew * this.originX, this.ecy = this.eh * this.originY, this.erx = Math.max(this.ecx, this.ew - this.ecx), this.ery = Math.max(this.ecy, this.eh - this.ecy)
    }, o.prototype.queueCalibration = function(t) {
        clearTimeout(this.calibrationTimer), this.calibrationTimer = setTimeout(this.onCalibrationTimer, t)
    }, o.prototype.enable = function() {
        this.enabled || (this.enabled = !0, this.orientationSupport ? (this.portrait = null, i.addEventListener("deviceorientation", this.onDeviceOrientation), setTimeout(this.onOrientationTimer, this.supportDelay)) : (this.cx = 0, this.cy = 0, this.portrait = !1, i.addEventListener("mousemove", this.onMouseMove)), i.addEventListener("resize", this.onWindowResize), this.raf = requestAnimationFrame(this.onAnimationFrame))
    }, o.prototype.disable = function() {
        this.enabled && (this.enabled = !1, this.orientationSupport ? i.removeEventListener("deviceorientation", this.onDeviceOrientation) : i.removeEventListener("mousemove", this.onMouseMove), i.removeEventListener("resize", this.onWindowResize), cancelAnimationFrame(this.raf))
    }, o.prototype.calibrate = function(t, i) {
        this.calibrateX = t === s ? this.calibrateX : t, this.calibrateY = i === s ? this.calibrateY : i
    }, o.prototype.invert = function(t, i) {
        this.invertX = t === s ? this.invertX : t, this.invertY = i === s ? this.invertY : i
    }, o.prototype.friction = function(t, i) {
        this.frictionX = t === s ? this.frictionX : t, this.frictionY = i === s ? this.frictionY : i
    }, o.prototype.scalar = function(t, i) {
        this.scalarX = t === s ? this.scalarX : t, this.scalarY = i === s ? this.scalarY : i
    }, o.prototype.limit = function(t, i) {
        this.limitX = t === s ? this.limitX : t, this.limitY = i === s ? this.limitY : i
    }, o.prototype.origin = function(t, i) {
        this.originX = t === s ? this.originX : t, this.originY = i === s ? this.originY : i
    }, o.prototype.clamp = function(t, i, e) {
        return t = Math.max(t, i), t = Math.min(t, e)
    }, o.prototype.css = function(i, e, o) {
        var n = this.propertyCache[e];
        if (!n)
            for (var a = 0, r = this.vendors.length; r > a; a++)
                if (n = null !== this.vendors[a] ? t.camelCase(this.vendors[a][1] + "-" + e) : e, i.style[n] !== s) {
                    this.propertyCache[e] = n;
                    break
                }
        i.style[n] = o
    }, o.prototype.accelerate = function(t) {
        for (var i = 0, e = t.length; e > i; i++) {
            var s = t[i];
            this.css(s, "transform", "translate3d(0,0,0)"), this.css(s, "transform-style", "preserve-3d"), this.css(s, "backface-visibility", "hidden")
        }
    }, o.prototype.setPosition = function(t, i, e) {
        i += "px", e += "px", this.transform3DSupport ? this.css(t, "transform", "translate3d(" + i + "," + e + ",0)") : this.transform2DSupport ? this.css(t, "transform", "translate(" + i + "," + e + ")") : (t.style.left = i, t.style.top = e)
    }, o.prototype.onOrientationTimer = function() {
        this.orientationSupport && 0 === this.orientationStatus && (this.disable(), this.orientationSupport = !1, this.enable())
    }, o.prototype.onCalibrationTimer = function() {
        this.calibrationFlag = !0
    }, o.prototype.onWindowResize = function() {
        this.updateDimensions()
    }, o.prototype.onAnimationFrame = function() {
        this.updateBounds();
        var t = this.ix - this.cx,
            i = this.iy - this.cy;
        (Math.abs(t) > this.calibrationThreshold || Math.abs(i) > this.calibrationThreshold) && this.queueCalibration(0), this.portrait ? (this.mx = this.calibrateX ? i : this.iy, this.my = this.calibrateY ? t : this.ix) : (this.mx = this.calibrateX ? t : this.ix, this.my = this.calibrateY ? i : this.iy), this.mx *= this.ew * (this.scalarX / 100), this.my *= this.eh * (this.scalarY / 100), isNaN(parseFloat(this.limitX)) || (this.mx = this.clamp(this.mx, -this.limitX, this.limitX)), isNaN(parseFloat(this.limitY)) || (this.my = this.clamp(this.my, -this.limitY, this.limitY)), this.vx += (this.mx - this.vx) * this.frictionX, this.vy += (this.my - this.vy) * this.frictionY;
        for (var e = 0, s = this.$layers.length; s > e; e++) {
            var o = this.depths[e],
                n = this.$layers[e],
                a = this.vx * o * (this.invertX ? -1 : 1),
                r = this.vy * o * (this.invertY ? -1 : 1);
            this.setPosition(n, a, r)
        }
        this.raf = requestAnimationFrame(this.onAnimationFrame)
    }, o.prototype.onDeviceOrientation = function(t) {
        if (!this.desktop && null !== t.beta && null !== t.gamma) {
            this.orientationStatus = 1;
            var e = (t.beta || 0) / a,
                s = (t.gamma || 0) / a,
                o = i.innerHeight > i.innerWidth;
            this.portrait !== o && (this.portrait = o, this.calibrationFlag = !0), this.calibrationFlag && (this.calibrationFlag = !1, this.cx = e, this.cy = s), this.ix = e, this.iy = s
        }
    }, o.prototype.onMouseMove = function(t) {
        var i = t.clientX,
            e = t.clientY;
        !this.orientationSupport && this.relativeInput ? (this.clipRelativeInput && (i = Math.max(i, this.ex), i = Math.min(i, this.ex + this.ew), e = Math.max(e, this.ey), e = Math.min(e, this.ey + this.eh)), this.ix = (i - this.ex - this.ecx) / this.erx, this.iy = (e - this.ey - this.ecy) / this.ery) : (this.ix = (i - this.wcx) / this.wrx, this.iy = (e - this.wcy) / this.wry)
    };
    var h = {
        enable: o.prototype.enable,
        disable: o.prototype.disable,
        updateLayers: o.prototype.updateLayers,
        calibrate: o.prototype.calibrate,
        friction: o.prototype.friction,
        invert: o.prototype.invert,
        scalar: o.prototype.scalar,
        limit: o.prototype.limit,
        origin: o.prototype.origin
    };
    t.fn[n] = function(i) {
        var e = arguments;
        return this.each(function() {
            var s = t(this),
                a = s.data(n);
            a || (a = new o(this, i), s.data(n, a)), h[i] && a[i].apply(a, Array.prototype.slice.call(e, 1))
        })
    }
}(window.jQuery || window.Zepto, window, document),
function() {
    for (var t = 0, i = ["ms", "moz", "webkit", "o"], e = 0; e < i.length && !window.requestAnimationFrame; ++e) window.requestAnimationFrame = window[i[e] + "RequestAnimationFrame"], window.cancelAnimationFrame = window[i[e] + "CancelAnimationFrame"] || window[i[e] + "CancelRequestAnimationFrame"];
    window.requestAnimationFrame || (window.requestAnimationFrame = function(i) {
        var e = (new Date).getTime(),
            s = Math.max(0, 16 - (e - t)),
            o = window.setTimeout(function() {
                i(e + s)
            }, s);
        return t = e + s, o
    }), window.cancelAnimationFrame || (window.cancelAnimationFrame = function(t) {
        clearTimeout(t)
    })
}();
! function(a) {
    "use strict";
    "function" == typeof define && define.amd ? define(["jquery"], a) : "undefined" != typeof exports ? module.exports = a(require("jquery")) : a(jQuery)
}(function(a) {
    "use strict";
    var b = window.Slick || {};
    b = function() {
        function c(c, d) {
            var f, e = this;
            e.defaults = {
                accessibility: !0,
                adaptiveHeight: !1,
                appendArrows: a(c),
                appendDots: a(c),
                arrows: !0,
                asNavFor: null,
                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
                autoplay: !1,
                autoplaySpeed: 3e3,
                centerMode: !1,
                centerPadding: "50px",
                cssEase: "ease",
                customPaging: function(b, c) {
                    return a('<button type="button" data-role="none" role="button" tabindex="0" />').text(c + 1)
                },
                dots: !1,
                dotsClass: "slick-dots",
                draggable: !0,
                easing: "linear",
                edgeFriction: .35,
                fade: !1,
                focusOnSelect: !1,
                infinite: !0,
                initialSlide: 0,
                lazyLoad: "ondemand",
                mobileFirst: !1,
                pauseOnHover: !0,
                pauseOnFocus: !0,
                pauseOnDotsHover: !1,
                respondTo: "window",
                responsive: null,
                rows: 1,
                rtl: !1,
                slide: "",
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: !0,
                swipeToSlide: !1,
                touchMove: !0,
                touchThreshold: 5,
                useCSS: !0,
                useTransform: !0,
                variableWidth: !1,
                vertical: !1,
                verticalSwiping: !1,
                waitForAnimate: !0,
                zIndex: 1e3
            }, e.initials = {
                animating: !1,
                dragging: !1,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: !1,
                slideOffset: 0,
                swipeLeft: null,
                $list: null,
                touchObject: {},
                transformsEnabled: !1,
                unslicked: !1
            }, a.extend(e, e.initials), e.activeBreakpoint = null, e.animType = null, e.animProp = null, e.breakpoints = [], e.breakpointSettings = [], e.cssTransitions = !1, e.focussed = !1, e.interrupted = !1, e.hidden = "hidden", e.paused = !0, e.positionProp = null, e.respondTo = null, e.rowCount = 1, e.shouldClick = !0, e.$slider = a(c), e.$slidesCache = null, e.transformType = null, e.transitionType = null, e.visibilityChange = "visibilitychange", e.windowWidth = 0, e.windowTimer = null, f = a(c).data("slick") || {}, e.options = a.extend({}, e.defaults, d, f), e.currentSlide = e.options.initialSlide, e.originalSettings = e.options, "undefined" != typeof document.mozHidden ? (e.hidden = "mozHidden", e.visibilityChange = "mozvisibilitychange") : "undefined" != typeof document.webkitHidden && (e.hidden = "webkitHidden", e.visibilityChange = "webkitvisibilitychange"), e.autoPlay = a.proxy(e.autoPlay, e), e.autoPlayClear = a.proxy(e.autoPlayClear, e), e.autoPlayIterator = a.proxy(e.autoPlayIterator, e), e.changeSlide = a.proxy(e.changeSlide, e), e.clickHandler = a.proxy(e.clickHandler, e), e.selectHandler = a.proxy(e.selectHandler, e), e.setPosition = a.proxy(e.setPosition, e), e.swipeHandler = a.proxy(e.swipeHandler, e), e.dragHandler = a.proxy(e.dragHandler, e), e.keyHandler = a.proxy(e.keyHandler, e), e.instanceUid = b++, e.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/, e.registerBreakpoints(), e.init(!0)
        }
        var b = 0;
        return c
    }(), b.prototype.activateADA = function() {
        var a = this;
        a.$slideTrack.find(".slick-active").attr({
            "aria-hidden": "false"
        }).find("a, input, button, select").attr({
            tabindex: "0"
        })
    }, b.prototype.addSlide = b.prototype.slickAdd = function(b, c, d) {
        var e = this;
        if ("boolean" == typeof c) d = c, c = null;
        else if (0 > c || c >= e.slideCount) return !1;
        e.unload(), "number" == typeof c ? 0 === c && 0 === e.$slides.length ? a(b).appendTo(e.$slideTrack) : d ? a(b).insertBefore(e.$slides.eq(c)) : a(b).insertAfter(e.$slides.eq(c)) : d === !0 ? a(b).prependTo(e.$slideTrack) : a(b).appendTo(e.$slideTrack), e.$slides = e.$slideTrack.children(this.options.slide), e.$slideTrack.children(this.options.slide).detach(), e.$slideTrack.append(e.$slides), e.$slides.each(function(b, c) {
            a(c).attr("data-slick-index", b)
        }), e.$slidesCache = e.$slides, e.reinit()
    }, b.prototype.animateHeight = function() {
        var a = this;
        if (1 === a.options.slidesToShow && a.options.adaptiveHeight === !0 && a.options.vertical === !1) {
            var b = a.$slides.eq(a.currentSlide).outerHeight(!0);
            a.$list.animate({
                height: b
            }, a.options.speed)
        }
    }, b.prototype.animateSlide = function(b, c) {
        var d = {},
            e = this;
        e.animateHeight(), e.options.rtl === !0 && e.options.vertical === !1 && (b = -b), e.transformsEnabled === !1 ? e.options.vertical === !1 ? e.$slideTrack.animate({
            left: b
        }, e.options.speed, e.options.easing, c) : e.$slideTrack.animate({
            top: b
        }, e.options.speed, e.options.easing, c) : e.cssTransitions === !1 ? (e.options.rtl === !0 && (e.currentLeft = -e.currentLeft), a({
            animStart: e.currentLeft
        }).animate({
            animStart: b
        }, {
            duration: e.options.speed,
            easing: e.options.easing,
            step: function(a) {
                a = Math.ceil(a), e.options.vertical === !1 ? (d[e.animType] = "translate(" + a + "px, 0px)", e.$slideTrack.css(d)) : (d[e.animType] = "translate(0px," + a + "px)", e.$slideTrack.css(d))
            },
            complete: function() {
                c && c.call()
            }
        })) : (e.applyTransition(), b = Math.ceil(b), e.options.vertical === !1 ? d[e.animType] = "translate3d(" + b + "px, 0px, 0px)" : d[e.animType] = "translate3d(0px," + b + "px, 0px)", e.$slideTrack.css(d), c && setTimeout(function() {
            e.disableTransition(), c.call()
        }, e.options.speed))
    }, b.prototype.getNavTarget = function() {
        var b = this,
            c = b.options.asNavFor;
        return c && null !== c && (c = a(c).not(b.$slider)), c
    }, b.prototype.asNavFor = function(b) {
        var c = this,
            d = c.getNavTarget();
        null !== d && "object" == typeof d && d.each(function() {
            var c = a(this).slick("getSlick");
            c.unslicked || c.slideHandler(b, !0)
        })
    }, b.prototype.applyTransition = function(a) {
        var b = this,
            c = {};
        b.options.fade === !1 ? c[b.transitionType] = b.transformType + " " + b.options.speed + "ms " + b.options.cssEase : c[b.transitionType] = "opacity " + b.options.speed + "ms " + b.options.cssEase, b.options.fade === !1 ? b.$slideTrack.css(c) : b.$slides.eq(a).css(c)
    }, b.prototype.autoPlay = function() {
        var a = this;
        a.autoPlayClear(), a.slideCount > a.options.slidesToShow && (a.autoPlayTimer = setInterval(a.autoPlayIterator, a.options.autoplaySpeed))
    }, b.prototype.autoPlayClear = function() {
        var a = this;
        a.autoPlayTimer && clearInterval(a.autoPlayTimer)
    }, b.prototype.autoPlayIterator = function() {
        var a = this,
            b = a.currentSlide + a.options.slidesToScroll;
        a.paused || a.interrupted || a.focussed || (a.options.infinite === !1 && (1 === a.direction && a.currentSlide + 1 === a.slideCount - 1 ? a.direction = 0 : 0 === a.direction && (b = a.currentSlide - a.options.slidesToScroll, a.currentSlide - 1 === 0 && (a.direction = 1))), a.slideHandler(b))
    }, b.prototype.buildArrows = function() {
        var b = this;
        b.options.arrows === !0 && (b.$prevArrow = a(b.options.prevArrow).addClass("slick-arrow"), b.$nextArrow = a(b.options.nextArrow).addClass("slick-arrow"), b.slideCount > b.options.slidesToShow ? (b.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), b.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), b.htmlExpr.test(b.options.prevArrow) && b.$prevArrow.prependTo(b.options.appendArrows), b.htmlExpr.test(b.options.nextArrow) && b.$nextArrow.appendTo(b.options.appendArrows), b.options.infinite !== !0 && b.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true")) : b.$prevArrow.add(b.$nextArrow).addClass("slick-hidden").attr({
            "aria-disabled": "true",
            tabindex: "-1"
        }))
    }, b.prototype.buildDots = function() {
        var c, d, b = this;
        if (b.options.dots === !0 && b.slideCount > b.options.slidesToShow) {
            for (b.$slider.addClass("slick-dotted"), d = a("<ul />").addClass(b.options.dotsClass), c = 0; c <= b.getDotCount(); c += 1) d.append(a("<li />").append(b.options.customPaging.call(this, b, c)));
            b.$dots = d.appendTo(b.options.appendDots), b.$dots.find("li").first().addClass("slick-active").attr("aria-hidden", "false")
        }
    }, b.prototype.buildOut = function() {
        var b = this;
        b.$slides = b.$slider.children(b.options.slide + ":not(.slick-cloned)").addClass("slick-slide"), b.slideCount = b.$slides.length, b.$slides.each(function(b, c) {
            a(c).attr("data-slick-index", b).data("originalStyling", a(c).attr("style") || "")
        }), b.$slider.addClass("slick-slider"), b.$slideTrack = 0 === b.slideCount ? a('<div class="slick-track"/>').appendTo(b.$slider) : b.$slides.wrapAll('<div class="slick-track"/>').parent(), b.$list = b.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent(), b.$slideTrack.css("opacity", 0), (b.options.centerMode === !0 || b.options.swipeToSlide === !0) && (b.options.slidesToScroll = 1), a("img[data-lazy]", b.$slider).not("[src]").addClass("slick-loading"), b.setupInfinite(), b.buildArrows(), b.buildDots(), b.updateDots(), b.setSlideClasses("number" == typeof b.currentSlide ? b.currentSlide : 0), b.options.draggable === !0 && b.$list.addClass("draggable")
    }, b.prototype.buildRows = function() {
        var b, c, d, e, f, g, h, a = this;
        if (e = document.createDocumentFragment(), g = a.$slider.children(), a.options.rows > 1) {
            for (h = a.options.slidesPerRow * a.options.rows, f = Math.ceil(g.length / h), b = 0; f > b; b++) {
                var i = document.createElement("div");
                for (c = 0; c < a.options.rows; c++) {
                    var j = document.createElement("div");
                    for (d = 0; d < a.options.slidesPerRow; d++) {
                        var k = b * h + (c * a.options.slidesPerRow + d);
                        g.get(k) && j.appendChild(g.get(k))
                    }
                    i.appendChild(j)
                }
                e.appendChild(i)
            }
            a.$slider.empty().append(e), a.$slider.children().children().children().css({
                width: 100 / a.options.slidesPerRow + "%",
                display: "inline-block"
            })
        }
    }, b.prototype.checkResponsive = function(b, c) {
        var e, f, g, d = this,
            h = !1,
            i = d.$slider.width(),
            j = window.innerWidth || a(window).width();
        if ("window" === d.respondTo ? g = j : "slider" === d.respondTo ? g = i : "min" === d.respondTo && (g = Math.min(j, i)), d.options.responsive && d.options.responsive.length && null !== d.options.responsive) {
            f = null;
            for (e in d.breakpoints) d.breakpoints.hasOwnProperty(e) && (d.originalSettings.mobileFirst === !1 ? g < d.breakpoints[e] && (f = d.breakpoints[e]) : g > d.breakpoints[e] && (f = d.breakpoints[e]));
            null !== f ? null !== d.activeBreakpoint ? (f !== d.activeBreakpoint || c) && (d.activeBreakpoint = f, "unslick" === d.breakpointSettings[f] ? d.unslick(f) : (d.options = a.extend({}, d.originalSettings, d.breakpointSettings[f]), b === !0 && (d.currentSlide = d.options.initialSlide), d.refresh(b)), h = f) : (d.activeBreakpoint = f, "unslick" === d.breakpointSettings[f] ? d.unslick(f) : (d.options = a.extend({}, d.originalSettings, d.breakpointSettings[f]), b === !0 && (d.currentSlide = d.options.initialSlide), d.refresh(b)), h = f) : null !== d.activeBreakpoint && (d.activeBreakpoint = null, d.options = d.originalSettings, b === !0 && (d.currentSlide = d.options.initialSlide), d.refresh(b), h = f), b || h === !1 || d.$slider.trigger("breakpoint", [d, h])
        }
    }, b.prototype.changeSlide = function(b, c) {
        var f, g, h, d = this,
            e = a(b.currentTarget);
        switch (e.is("a") && b.preventDefault(), e.is("li") || (e = e.closest("li")), h = d.slideCount % d.options.slidesToScroll !== 0, f = h ? 0 : (d.slideCount - d.currentSlide) % d.options.slidesToScroll, b.data.message) {
            case "previous":
                g = 0 === f ? d.options.slidesToScroll : d.options.slidesToShow - f, d.slideCount > d.options.slidesToShow && d.slideHandler(d.currentSlide - g, !1, c);
                break;
            case "next":
                g = 0 === f ? d.options.slidesToScroll : f, d.slideCount > d.options.slidesToShow && d.slideHandler(d.currentSlide + g, !1, c);
                break;
            case "index":
                var i = 0 === b.data.index ? 0 : b.data.index || e.index() * d.options.slidesToScroll;
                d.slideHandler(d.checkNavigable(i), !1, c), e.children().trigger("focus");
                break;
            default:
                return
        }
    }, b.prototype.checkNavigable = function(a) {
        var c, d, b = this;
        if (c = b.getNavigableIndexes(), d = 0, a > c[c.length - 1]) a = c[c.length - 1];
        else
            for (var e in c) {
                if (a < c[e]) {
                    a = d;
                    break
                }
                d = c[e]
            }
        return a
    }, b.prototype.cleanUpEvents = function() {
        var b = this;
        b.options.dots && null !== b.$dots && a("li", b.$dots).off("click.slick", b.changeSlide).off("mouseenter.slick", a.proxy(b.interrupt, b, !0)).off("mouseleave.slick", a.proxy(b.interrupt, b, !1)), b.$slider.off("focus.slick blur.slick"), b.options.arrows === !0 && b.slideCount > b.options.slidesToShow && (b.$prevArrow && b.$prevArrow.off("click.slick", b.changeSlide), b.$nextArrow && b.$nextArrow.off("click.slick", b.changeSlide)), b.$list.off("touchstart.slick mousedown.slick", b.swipeHandler), b.$list.off("touchmove.slick mousemove.slick", b.swipeHandler), b.$list.off("touchend.slick mouseup.slick", b.swipeHandler), b.$list.off("touchcancel.slick mouseleave.slick", b.swipeHandler), b.$list.off("click.slick", b.clickHandler), a(document).off(b.visibilityChange, b.visibility), b.cleanUpSlideEvents(), b.options.accessibility === !0 && b.$list.off("keydown.slick", b.keyHandler), b.options.focusOnSelect === !0 && a(b.$slideTrack).children().off("click.slick", b.selectHandler), a(window).off("orientationchange.slick.slick-" + b.instanceUid, b.orientationChange), a(window).off("resize.slick.slick-" + b.instanceUid, b.resize), a("[draggable!=true]", b.$slideTrack).off("dragstart", b.preventDefault), a(window).off("load.slick.slick-" + b.instanceUid, b.setPosition), a(document).off("ready.slick.slick-" + b.instanceUid, b.setPosition)
    }, b.prototype.cleanUpSlideEvents = function() {
        var b = this;
        b.$list.off("mouseenter.slick", a.proxy(b.interrupt, b, !0)), b.$list.off("mouseleave.slick", a.proxy(b.interrupt, b, !1))
    }, b.prototype.cleanUpRows = function() {
        var b, a = this;
        a.options.rows > 1 && (b = a.$slides.children().children(), b.removeAttr("style"), a.$slider.empty().append(b))
    }, b.prototype.clickHandler = function(a) {
        var b = this;
        b.shouldClick === !1 && (a.stopImmediatePropagation(), a.stopPropagation(), a.preventDefault())
    }, b.prototype.destroy = function(b) {
        var c = this;
        c.autoPlayClear(), c.touchObject = {}, c.cleanUpEvents(), a(".slick-cloned", c.$slider).detach(), c.$dots && c.$dots.remove(), c.$prevArrow && c.$prevArrow.length && (c.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), c.htmlExpr.test(c.options.prevArrow) && c.$prevArrow.remove()), c.$nextArrow && c.$nextArrow.length && (c.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), c.htmlExpr.test(c.options.nextArrow) && c.$nextArrow.remove()), c.$slides && (c.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function() {
            a(this).attr("style", a(this).data("originalStyling"))
        }), c.$slideTrack.children(this.options.slide).detach(), c.$slideTrack.detach(), c.$list.detach(), c.$slider.append(c.$slides)), c.cleanUpRows(), c.$slider.removeClass("slick-slider"), c.$slider.removeClass("slick-initialized"), c.$slider.removeClass("slick-dotted"), c.unslicked = !0, b || c.$slider.trigger("destroy", [c])
    }, b.prototype.disableTransition = function(a) {
        var b = this,
            c = {};
        c[b.transitionType] = "", b.options.fade === !1 ? b.$slideTrack.css(c) : b.$slides.eq(a).css(c)
    }, b.prototype.fadeSlide = function(a, b) {
        var c = this;
        c.cssTransitions === !1 ? (c.$slides.eq(a).css({
            zIndex: c.options.zIndex
        }), c.$slides.eq(a).animate({
            opacity: 1
        }, c.options.speed, c.options.easing, b)) : (c.applyTransition(a), c.$slides.eq(a).css({
            opacity: 1,
            zIndex: c.options.zIndex
        }), b && setTimeout(function() {
            c.disableTransition(a), b.call()
        }, c.options.speed))
    }, b.prototype.fadeSlideOut = function(a) {
        var b = this;
        b.cssTransitions === !1 ? b.$slides.eq(a).animate({
            opacity: 0,
            zIndex: b.options.zIndex - 2
        }, b.options.speed, b.options.easing) : (b.applyTransition(a), b.$slides.eq(a).css({
            opacity: 0,
            zIndex: b.options.zIndex - 2
        }))
    }, b.prototype.filterSlides = b.prototype.slickFilter = function(a) {
        var b = this;
        null !== a && (b.$slidesCache = b.$slides, b.unload(), b.$slideTrack.children(this.options.slide).detach(), b.$slidesCache.filter(a).appendTo(b.$slideTrack), b.reinit())
    }, b.prototype.focusHandler = function() {
        var b = this;
        b.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*:not(.slick-arrow)", function(c) {
            c.stopImmediatePropagation();
            var d = a(this);
            setTimeout(function() {
                b.options.pauseOnFocus && (b.focussed = d.is(":focus"), b.autoPlay())
            }, 0)
        })
    }, b.prototype.getCurrent = b.prototype.slickCurrentSlide = function() {
        var a = this;
        return a.currentSlide
    }, b.prototype.getDotCount = function() {
        var a = this,
            b = 0,
            c = 0,
            d = 0;
        if (a.options.infinite === !0)
            for (; b < a.slideCount;) ++d, b = c + a.options.slidesToScroll, c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;
        else if (a.options.centerMode === !0) d = a.slideCount;
        else if (a.options.asNavFor)
            for (; b < a.slideCount;) ++d, b = c + a.options.slidesToScroll, c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;
        else d = 1 + Math.ceil((a.slideCount - a.options.slidesToShow) / a.options.slidesToScroll);
        return d - 1
    }, b.prototype.getLeft = function(a) {
        var c, d, f, b = this,
            e = 0;
        return b.slideOffset = 0, d = b.$slides.first().outerHeight(!0), b.options.infinite === !0 ? (b.slideCount > b.options.slidesToShow && (b.slideOffset = b.slideWidth * b.options.slidesToShow * -1, e = d * b.options.slidesToShow * -1), b.slideCount % b.options.slidesToScroll !== 0 && a + b.options.slidesToScroll > b.slideCount && b.slideCount > b.options.slidesToShow && (a > b.slideCount ? (b.slideOffset = (b.options.slidesToShow - (a - b.slideCount)) * b.slideWidth * -1, e = (b.options.slidesToShow - (a - b.slideCount)) * d * -1) : (b.slideOffset = b.slideCount % b.options.slidesToScroll * b.slideWidth * -1, e = b.slideCount % b.options.slidesToScroll * d * -1))) : a + b.options.slidesToShow > b.slideCount && (b.slideOffset = (a + b.options.slidesToShow - b.slideCount) * b.slideWidth, e = (a + b.options.slidesToShow - b.slideCount) * d), b.slideCount <= b.options.slidesToShow && (b.slideOffset = 0, e = 0), b.options.centerMode === !0 && b.options.infinite === !0 ? b.slideOffset += b.slideWidth * Math.floor(b.options.slidesToShow / 2) - b.slideWidth : b.options.centerMode === !0 && (b.slideOffset = 0, b.slideOffset += b.slideWidth * Math.floor(b.options.slidesToShow / 2)), c = b.options.vertical === !1 ? a * b.slideWidth * -1 + b.slideOffset : a * d * -1 + e, b.options.variableWidth === !0 && (f = b.slideCount <= b.options.slidesToShow || b.options.infinite === !1 ? b.$slideTrack.children(".slick-slide").eq(a) : b.$slideTrack.children(".slick-slide").eq(a + b.options.slidesToShow), c = b.options.rtl === !0 ? f[0] ? -1 * (b.$slideTrack.width() - f[0].offsetLeft - f.width()) : 0 : f[0] ? -1 * f[0].offsetLeft : 0, b.options.centerMode === !0 && (f = b.slideCount <= b.options.slidesToShow || b.options.infinite === !1 ? b.$slideTrack.children(".slick-slide").eq(a) : b.$slideTrack.children(".slick-slide").eq(a + b.options.slidesToShow + 1), c = b.options.rtl === !0 ? f[0] ? -1 * (b.$slideTrack.width() - f[0].offsetLeft - f.width()) : 0 : f[0] ? -1 * f[0].offsetLeft : 0, c += (b.$list.width() - f.outerWidth()) / 2)), c
    }, b.prototype.getOption = b.prototype.slickGetOption = function(a) {
        var b = this;
        return b.options[a]
    }, b.prototype.getNavigableIndexes = function() {
        var e, a = this,
            b = 0,
            c = 0,
            d = [];
        for (a.options.infinite === !1 ? e = a.slideCount : (b = -1 * a.options.slidesToScroll, c = -1 * a.options.slidesToScroll, e = 2 * a.slideCount); e > b;) d.push(b), b = c + a.options.slidesToScroll, c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;
        return d
    }, b.prototype.getSlick = function() {
        return this
    }, b.prototype.getSlideCount = function() {
        var c, d, e, b = this;
        return e = b.options.centerMode === !0 ? b.slideWidth * Math.floor(b.options.slidesToShow / 2) : 0, b.options.swipeToSlide === !0 ? (b.$slideTrack.find(".slick-slide").each(function(c, f) {
            return f.offsetLeft - e + a(f).outerWidth() / 2 > -1 * b.swipeLeft ? (d = f, !1) : void 0
        }), c = Math.abs(a(d).attr("data-slick-index") - b.currentSlide) || 1) : b.options.slidesToScroll
    }, b.prototype.goTo = b.prototype.slickGoTo = function(a, b) {
        var c = this;
        c.changeSlide({
            data: {
                message: "index",
                index: parseInt(a)
            }
        }, b)
    }, b.prototype.init = function(b) {
        var c = this;
        a(c.$slider).hasClass("slick-initialized") || (a(c.$slider).addClass("slick-initialized"), c.buildRows(), c.buildOut(), c.setProps(), c.startLoad(), c.loadSlider(), c.initializeEvents(), c.updateArrows(), c.updateDots(), c.checkResponsive(!0), c.focusHandler()), b && c.$slider.trigger("init", [c]), c.options.accessibility === !0 && c.initADA(), c.options.autoplay && (c.paused = !1, c.autoPlay())
    }, b.prototype.initADA = function() {
        var b = this;
        b.$slides.add(b.$slideTrack.find(".slick-cloned")).attr({
            "aria-hidden": "true",
            tabindex: "-1"
        }).find("a, input, button, select").attr({
            tabindex: "-1"
        }), b.$slideTrack.attr("role", "listbox"), b.$slides.not(b.$slideTrack.find(".slick-cloned")).each(function(c) {
            a(this).attr({
                role: "option",
                "aria-describedby": "slick-slide" + b.instanceUid + c
            })
        }), null !== b.$dots && b.$dots.attr("role", "tablist").find("li").each(function(c) {
            a(this).attr({
                role: "presentation",
                "aria-selected": "false",
                "aria-controls": "navigation" + b.instanceUid + c,
                id: "slick-slide" + b.instanceUid + c
            })
        }).first().attr("aria-selected", "true").end().find("button").attr("role", "button").end().closest("div").attr("role", "toolbar"), b.activateADA()
    }, b.prototype.initArrowEvents = function() {
        var a = this;
        a.options.arrows === !0 && a.slideCount > a.options.slidesToShow && (a.$prevArrow.off("click.slick").on("click.slick", {
            message: "previous"
        }, a.changeSlide), a.$nextArrow.off("click.slick").on("click.slick", {
            message: "next"
        }, a.changeSlide))
    }, b.prototype.initDotEvents = function() {
        var b = this;
        b.options.dots === !0 && b.slideCount > b.options.slidesToShow && a("li", b.$dots).on("click.slick", {
            message: "index"
        }, b.changeSlide), b.options.dots === !0 && b.options.pauseOnDotsHover === !0 && a("li", b.$dots).on("mouseenter.slick", a.proxy(b.interrupt, b, !0)).on("mouseleave.slick", a.proxy(b.interrupt, b, !1))
    }, b.prototype.initSlideEvents = function() {
        var b = this;
        b.options.pauseOnHover && (b.$list.on("mouseenter.slick", a.proxy(b.interrupt, b, !0)), b.$list.on("mouseleave.slick", a.proxy(b.interrupt, b, !1)))
    }, b.prototype.initializeEvents = function() {
        var b = this;
        b.initArrowEvents(), b.initDotEvents(), b.initSlideEvents(), b.$list.on("touchstart.slick mousedown.slick", {
            action: "start"
        }, b.swipeHandler), b.$list.on("touchmove.slick mousemove.slick", {
            action: "move"
        }, b.swipeHandler), b.$list.on("touchend.slick mouseup.slick", {
            action: "end"
        }, b.swipeHandler), b.$list.on("touchcancel.slick mouseleave.slick", {
            action: "end"
        }, b.swipeHandler), b.$list.on("click.slick", b.clickHandler), a(document).on(b.visibilityChange, a.proxy(b.visibility, b)), b.options.accessibility === !0 && b.$list.on("keydown.slick", b.keyHandler), b.options.focusOnSelect === !0 && a(b.$slideTrack).children().on("click.slick", b.selectHandler), a(window).on("orientationchange.slick.slick-" + b.instanceUid, a.proxy(b.orientationChange, b)), a(window).on("resize.slick.slick-" + b.instanceUid, a.proxy(b.resize, b)), a("[draggable!=true]", b.$slideTrack).on("dragstart", b.preventDefault), a(window).on("load.slick.slick-" + b.instanceUid, b.setPosition), a(document).on("ready.slick.slick-" + b.instanceUid, b.setPosition)
    }, b.prototype.initUI = function() {
        var a = this;
        a.options.arrows === !0 && a.slideCount > a.options.slidesToShow && (a.$prevArrow.show(), a.$nextArrow.show()), a.options.dots === !0 && a.slideCount > a.options.slidesToShow && a.$dots.show()
    }, b.prototype.keyHandler = function(a) {
        var b = this;
        a.target.tagName.match("TEXTAREA|INPUT|SELECT") || (37 === a.keyCode && b.options.accessibility === !0 ? b.changeSlide({
            data: {
                message: b.options.rtl === !0 ? "next" : "previous"
            }
        }) : 39 === a.keyCode && b.options.accessibility === !0 && b.changeSlide({
            data: {
                message: b.options.rtl === !0 ? "previous" : "next"
            }
        }))
    }, b.prototype.lazyLoad = function() {
        function g(c) {
            a("img[data-lazy]", c).each(function() {
                var c = a(this),
                    d = a(this).attr("data-lazy"),
                    e = document.createElement("img");
                e.onload = function() {
                    c.animate({
                        opacity: 0
                    }, 100, function() {
                        c.attr("src", d).animate({
                            opacity: 1
                        }, 200, function() {
                            c.removeAttr("data-lazy").removeClass("slick-loading")
                        }), b.$slider.trigger("lazyLoaded", [b, c, d])
                    })
                }, e.onerror = function() {
                    c.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), b.$slider.trigger("lazyLoadError", [b, c, d])
                }, e.src = d
            })
        }
        var c, d, e, f, b = this;
        b.options.centerMode === !0 ? b.options.infinite === !0 ? (e = b.currentSlide + (b.options.slidesToShow / 2 + 1), f = e + b.options.slidesToShow + 2) : (e = Math.max(0, b.currentSlide - (b.options.slidesToShow / 2 + 1)), f = 2 + (b.options.slidesToShow / 2 + 1) + b.currentSlide) : (e = b.options.infinite ? b.options.slidesToShow + b.currentSlide : b.currentSlide, f = Math.ceil(e + b.options.slidesToShow), b.options.fade === !0 && (e > 0 && e--, f <= b.slideCount && f++)), c = b.$slider.find(".slick-slide").slice(e, f), g(c), b.slideCount <= b.options.slidesToShow ? (d = b.$slider.find(".slick-slide"), g(d)) : b.currentSlide >= b.slideCount - b.options.slidesToShow ? (d = b.$slider.find(".slick-cloned").slice(0, b.options.slidesToShow), g(d)) : 0 === b.currentSlide && (d = b.$slider.find(".slick-cloned").slice(-1 * b.options.slidesToShow), g(d))
    }, b.prototype.loadSlider = function() {
        var a = this;
        a.setPosition(), a.$slideTrack.css({
            opacity: 1
        }), a.$slider.removeClass("slick-loading"), a.initUI(), "progressive" === a.options.lazyLoad && a.progressiveLazyLoad()
    }, b.prototype.next = b.prototype.slickNext = function() {
        var a = this;
        a.changeSlide({
            data: {
                message: "next"
            }
        })
    }, b.prototype.orientationChange = function() {
        var a = this;
        a.checkResponsive(), a.setPosition()
    }, b.prototype.pause = b.prototype.slickPause = function() {
        var a = this;
        a.autoPlayClear(), a.paused = !0
    }, b.prototype.play = b.prototype.slickPlay = function() {
        var a = this;
        a.autoPlay(), a.options.autoplay = !0, a.paused = !1, a.focussed = !1, a.interrupted = !1
    }, b.prototype.postSlide = function(a) {
        var b = this;
        b.unslicked || (b.$slider.trigger("afterChange", [b, a]), b.animating = !1, b.setPosition(), b.swipeLeft = null, b.options.autoplay && b.autoPlay(), b.options.accessibility === !0 && b.initADA())
    }, b.prototype.prev = b.prototype.slickPrev = function() {
        var a = this;
        a.changeSlide({
            data: {
                message: "previous"
            }
        })
    }, b.prototype.preventDefault = function(a) {
        a.preventDefault()
    }, b.prototype.progressiveLazyLoad = function(b) {
        b = b || 1;
        var e, f, g, c = this,
            d = a("img[data-lazy]", c.$slider);
        d.length ? (e = d.first(), f = e.attr("data-lazy"), g = document.createElement("img"), g.onload = function() {
            e.attr("src", f).removeAttr("data-lazy").removeClass("slick-loading"), c.options.adaptiveHeight === !0 && c.setPosition(), c.$slider.trigger("lazyLoaded", [c, e, f]), c.progressiveLazyLoad()
        }, g.onerror = function() {
            3 > b ? setTimeout(function() {
                c.progressiveLazyLoad(b + 1)
            }, 500) : (e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), c.$slider.trigger("lazyLoadError", [c, e, f]), c.progressiveLazyLoad())
        }, g.src = f) : c.$slider.trigger("allImagesLoaded", [c])
    }, b.prototype.refresh = function(b) {
        var d, e, c = this;
        e = c.slideCount - c.options.slidesToShow, !c.options.infinite && c.currentSlide > e && (c.currentSlide = e), c.slideCount <= c.options.slidesToShow && (c.currentSlide = 0), d = c.currentSlide, c.destroy(!0), a.extend(c, c.initials, {
            currentSlide: d
        }), c.init(), b || c.changeSlide({
            data: {
                message: "index",
                index: d
            }
        }, !1)
    }, b.prototype.registerBreakpoints = function() {
        var c, d, e, b = this,
            f = b.options.responsive || null;
        if ("array" === a.type(f) && f.length) {
            b.respondTo = b.options.respondTo || "window";
            for (c in f)
                if (e = b.breakpoints.length - 1, d = f[c].breakpoint, f.hasOwnProperty(c)) {
                    for (; e >= 0;) b.breakpoints[e] && b.breakpoints[e] === d && b.breakpoints.splice(e, 1), e--;
                    b.breakpoints.push(d), b.breakpointSettings[d] = f[c].settings
                }
            b.breakpoints.sort(function(a, c) {
                return b.options.mobileFirst ? a - c : c - a
            })
        }
    }, b.prototype.reinit = function() {
        var b = this;
        b.$slides = b.$slideTrack.children(b.options.slide).addClass("slick-slide"), b.slideCount = b.$slides.length, b.currentSlide >= b.slideCount && 0 !== b.currentSlide && (b.currentSlide = b.currentSlide - b.options.slidesToScroll), b.slideCount <= b.options.slidesToShow && (b.currentSlide = 0), b.registerBreakpoints(), b.setProps(), b.setupInfinite(), b.buildArrows(), b.updateArrows(), b.initArrowEvents(), b.buildDots(), b.updateDots(), b.initDotEvents(), b.cleanUpSlideEvents(), b.initSlideEvents(), b.checkResponsive(!1, !0), b.options.focusOnSelect === !0 && a(b.$slideTrack).children().on("click.slick", b.selectHandler), b.setSlideClasses("number" == typeof b.currentSlide ? b.currentSlide : 0), b.setPosition(), b.focusHandler(), b.paused = !b.options.autoplay, b.autoPlay(), b.$slider.trigger("reInit", [b])
    }, b.prototype.resize = function() {
        var b = this;
        a(window).width() !== b.windowWidth && (clearTimeout(b.windowDelay), b.windowDelay = window.setTimeout(function() {
            b.windowWidth = a(window).width(), b.checkResponsive(), b.unslicked || b.setPosition()
        }, 50))
    }, b.prototype.removeSlide = b.prototype.slickRemove = function(a, b, c) {
        var d = this;
        return "boolean" == typeof a ? (b = a, a = b === !0 ? 0 : d.slideCount - 1) : a = b === !0 ? --a : a, d.slideCount < 1 || 0 > a || a > d.slideCount - 1 ? !1 : (d.unload(), c === !0 ? d.$slideTrack.children().remove() : d.$slideTrack.children(this.options.slide).eq(a).remove(), d.$slides = d.$slideTrack.children(this.options.slide), d.$slideTrack.children(this.options.slide).detach(), d.$slideTrack.append(d.$slides), d.$slidesCache = d.$slides, void d.reinit())
    }, b.prototype.setCSS = function(a) {
        var d, e, b = this,
            c = {};
        b.options.rtl === !0 && (a = -a), d = "left" == b.positionProp ? Math.ceil(a) + "px" : "0px", e = "top" == b.positionProp ? Math.ceil(a) + "px" : "0px", c[b.positionProp] = a, b.transformsEnabled === !1 ? b.$slideTrack.css(c) : (c = {}, b.cssTransitions === !1 ? (c[b.animType] = "translate(" + d + ", " + e + ")", b.$slideTrack.css(c)) : (c[b.animType] = "translate3d(" + d + ", " + e + ", 0px)", b.$slideTrack.css(c)))
    }, b.prototype.setDimensions = function() {
        var a = this;
        a.options.vertical === !1 ? a.options.centerMode === !0 && a.$list.css({
            padding: "0px " + a.options.centerPadding
        }) : (a.$list.height(a.$slides.first().outerHeight(!0) * a.options.slidesToShow), a.options.centerMode === !0 && a.$list.css({
            padding: a.options.centerPadding + " 0px"
        })), a.listWidth = a.$list.width(), a.listHeight = a.$list.height(), a.options.vertical === !1 && a.options.variableWidth === !1 ? (a.slideWidth = Math.ceil(a.listWidth / a.options.slidesToShow), a.$slideTrack.width(Math.ceil(a.slideWidth * a.$slideTrack.children(".slick-slide").length))) : a.options.variableWidth === !0 ? a.$slideTrack.width(5e3 * a.slideCount) : (a.slideWidth = Math.ceil(a.listWidth), a.$slideTrack.height(Math.ceil(a.$slides.first().outerHeight(!0) * a.$slideTrack.children(".slick-slide").length)));
        var b = a.$slides.first().outerWidth(!0) - a.$slides.first().width();
        a.options.variableWidth === !1 && a.$slideTrack.children(".slick-slide").width(a.slideWidth - b)
    }, b.prototype.setFade = function() {
        var c, b = this;
        b.$slides.each(function(d, e) {
            c = b.slideWidth * d * -1, b.options.rtl === !0 ? a(e).css({
                position: "relative",
                right: c,
                top: 0,
                zIndex: b.options.zIndex - 2,
                opacity: 0
            }) : a(e).css({
                position: "relative",
                left: c,
                top: 0,
                zIndex: b.options.zIndex - 2,
                opacity: 0
            })
        }), b.$slides.eq(b.currentSlide).css({
            zIndex: b.options.zIndex - 1,
            opacity: 1
        })
    }, b.prototype.setHeight = function() {
        var a = this;
        if (1 === a.options.slidesToShow && a.options.adaptiveHeight === !0 && a.options.vertical === !1) {
            var b = a.$slides.eq(a.currentSlide).outerHeight(!0);
            a.$list.css("height", b)
        }
    }, b.prototype.setOption = b.prototype.slickSetOption = function() {
        var c, d, e, f, h, b = this,
            g = !1;
        if ("object" === a.type(arguments[0]) ? (e = arguments[0], g = arguments[1], h = "multiple") : "string" === a.type(arguments[0]) && (e = arguments[0], f = arguments[1], g = arguments[2], "responsive" === arguments[0] && "array" === a.type(arguments[1]) ? h = "responsive" : "undefined" != typeof arguments[1] && (h = "single")), "single" === h) b.options[e] = f;
        else if ("multiple" === h) a.each(e, function(a, c) {
            b.options[a] = c
        });
        else if ("responsive" === h)
            for (d in f)
                if ("array" !== a.type(b.options.responsive)) b.options.responsive = [f[d]];
                else {
                    for (c = b.options.responsive.length - 1; c >= 0;) b.options.responsive[c].breakpoint === f[d].breakpoint && b.options.responsive.splice(c, 1), c--;
                    b.options.responsive.push(f[d])
                }
        g && (b.unload(), b.reinit())
    }, b.prototype.setPosition = function() {
        var a = this;
        a.setDimensions(), a.setHeight(), a.options.fade === !1 ? a.setCSS(a.getLeft(a.currentSlide)) : a.setFade(), a.$slider.trigger("setPosition", [a])
    }, b.prototype.setProps = function() {
        var a = this,
            b = document.body.style;
        a.positionProp = a.options.vertical === !0 ? "top" : "left", "top" === a.positionProp ? a.$slider.addClass("slick-vertical") : a.$slider.removeClass("slick-vertical"), (void 0 !== b.WebkitTransition || void 0 !== b.MozTransition || void 0 !== b.msTransition) && a.options.useCSS === !0 && (a.cssTransitions = !0), a.options.fade && ("number" == typeof a.options.zIndex ? a.options.zIndex < 3 && (a.options.zIndex = 3) : a.options.zIndex = a.defaults.zIndex), void 0 !== b.OTransform && (a.animType = "OTransform", a.transformType = "-o-transform", a.transitionType = "OTransition", void 0 === b.perspectiveProperty && void 0 === b.webkitPerspective && (a.animType = !1)), void 0 !== b.MozTransform && (a.animType = "MozTransform", a.transformType = "-moz-transform", a.transitionType = "MozTransition", void 0 === b.perspectiveProperty && void 0 === b.MozPerspective && (a.animType = !1)), void 0 !== b.webkitTransform && (a.animType = "webkitTransform", a.transformType = "-webkit-transform", a.transitionType = "webkitTransition", void 0 === b.perspectiveProperty && void 0 === b.webkitPerspective && (a.animType = !1)), void 0 !== b.msTransform && (a.animType = "msTransform", a.transformType = "-ms-transform", a.transitionType = "msTransition", void 0 === b.msTransform && (a.animType = !1)), void 0 !== b.transform && a.animType !== !1 && (a.animType = "transform", a.transformType = "transform", a.transitionType = "transition"), a.transformsEnabled = a.options.useTransform && null !== a.animType && a.animType !== !1
    }, b.prototype.setSlideClasses = function(a) {
        var c, d, e, f, b = this;
        d = b.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), b.$slides.eq(a).addClass("slick-current"), b.options.centerMode === !0 ? (c = Math.floor(b.options.slidesToShow / 2), b.options.infinite === !0 && (a >= c && a <= b.slideCount - 1 - c ? b.$slides.slice(a - c, a + c + 1).addClass("slick-active").attr("aria-hidden", "false") : (e = b.options.slidesToShow + a, d.slice(e - c + 1, e + c + 2).addClass("slick-active").attr("aria-hidden", "false")), 0 === a ? d.eq(d.length - 1 - b.options.slidesToShow).addClass("slick-center") : a === b.slideCount - 1 && d.eq(b.options.slidesToShow).addClass("slick-center")), b.$slides.eq(a).addClass("slick-center")) : a >= 0 && a <= b.slideCount - b.options.slidesToShow ? b.$slides.slice(a, a + b.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : d.length <= b.options.slidesToShow ? d.addClass("slick-active").attr("aria-hidden", "false") : (f = b.slideCount % b.options.slidesToShow, e = b.options.infinite === !0 ? b.options.slidesToShow + a : a, b.options.slidesToShow == b.options.slidesToScroll && b.slideCount - a < b.options.slidesToShow ? d.slice(e - (b.options.slidesToShow - f), e + f).addClass("slick-active").attr("aria-hidden", "false") : d.slice(e, e + b.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false")), "ondemand" === b.options.lazyLoad && b.lazyLoad()
    }, b.prototype.setupInfinite = function() {
        var c, d, e, b = this;
        if (b.options.fade === !0 && (b.options.centerMode = !1), b.options.infinite === !0 && b.options.fade === !1 && (d = null, b.slideCount > b.options.slidesToShow)) {
            for (e = b.options.centerMode === !0 ? b.options.slidesToShow + 1 : b.options.slidesToShow, c = b.slideCount; c > b.slideCount - e; c -= 1) d = c - 1, a(b.$slides[d]).clone(!0).attr("id", "").attr("data-slick-index", d - b.slideCount).prependTo(b.$slideTrack).addClass("slick-cloned");
            for (c = 0; e > c; c += 1) d = c, a(b.$slides[d]).clone(!0).attr("id", "").attr("data-slick-index", d + b.slideCount).appendTo(b.$slideTrack).addClass("slick-cloned");
            b.$slideTrack.find(".slick-cloned").find("[id]").each(function() {
                a(this).attr("id", "")
            })
        }
    }, b.prototype.interrupt = function(a) {
        var b = this;
        a || b.autoPlay(), b.interrupted = a
    }, b.prototype.selectHandler = function(b) {
        var c = this,
            d = a(b.target).is(".slick-slide") ? a(b.target) : a(b.target).parents(".slick-slide"),
            e = parseInt(d.attr("data-slick-index"));
        return e || (e = 0), c.slideCount <= c.options.slidesToShow ? (c.setSlideClasses(e), void c.asNavFor(e)) : void c.slideHandler(e)
    }, b.prototype.slideHandler = function(a, b, c) {
        var d, e, f, g, j, h = null,
            i = this;
        return b = b || !1, i.animating === !0 && i.options.waitForAnimate === !0 || i.options.fade === !0 && i.currentSlide === a || i.slideCount <= i.options.slidesToShow ? void 0 : (b === !1 && i.asNavFor(a), d = a, h = i.getLeft(d), g = i.getLeft(i.currentSlide), i.currentLeft = null === i.swipeLeft ? g : i.swipeLeft, i.options.infinite === !1 && i.options.centerMode === !1 && (0 > a || a > i.getDotCount() * i.options.slidesToScroll) ? void(i.options.fade === !1 && (d = i.currentSlide, c !== !0 ? i.animateSlide(g, function() {
            i.postSlide(d)
        }) : i.postSlide(d))) : i.options.infinite === !1 && i.options.centerMode === !0 && (0 > a || a > i.slideCount - i.options.slidesToScroll) ? void(i.options.fade === !1 && (d = i.currentSlide, c !== !0 ? i.animateSlide(g, function() {
            i.postSlide(d)
        }) : i.postSlide(d))) : (i.options.autoplay && clearInterval(i.autoPlayTimer), e = 0 > d ? i.slideCount % i.options.slidesToScroll !== 0 ? i.slideCount - i.slideCount % i.options.slidesToScroll : i.slideCount + d : d >= i.slideCount ? i.slideCount % i.options.slidesToScroll !== 0 ? 0 : d - i.slideCount : d, i.animating = !0, i.$slider.trigger("beforeChange", [i, i.currentSlide, e]), f = i.currentSlide, i.currentSlide = e, i.setSlideClasses(i.currentSlide), i.options.asNavFor && (j = i.getNavTarget(), j = j.slick("getSlick"), j.slideCount <= j.options.slidesToShow && j.setSlideClasses(i.currentSlide)), i.updateDots(), i.updateArrows(), i.options.fade === !0 ? (c !== !0 ? (i.fadeSlideOut(f), i.fadeSlide(e, function() {
            i.postSlide(e)
        })) : i.postSlide(e), void i.animateHeight()) : void(c !== !0 ? i.animateSlide(h, function() {
            i.postSlide(e)
        }) : i.postSlide(e))))
    }, b.prototype.startLoad = function() {
        var a = this;
        a.options.arrows === !0 && a.slideCount > a.options.slidesToShow && (a.$prevArrow.hide(), a.$nextArrow.hide()), a.options.dots === !0 && a.slideCount > a.options.slidesToShow && a.$dots.hide(), a.$slider.addClass("slick-loading")
    }, b.prototype.swipeDirection = function() {
        var a, b, c, d, e = this;
        return a = e.touchObject.startX - e.touchObject.curX, b = e.touchObject.startY - e.touchObject.curY, c = Math.atan2(b, a), d = Math.round(180 * c / Math.PI), 0 > d && (d = 360 - Math.abs(d)), 45 >= d && d >= 0 ? e.options.rtl === !1 ? "left" : "right" : 360 >= d && d >= 315 ? e.options.rtl === !1 ? "left" : "right" : d >= 135 && 225 >= d ? e.options.rtl === !1 ? "right" : "left" : e.options.verticalSwiping === !0 ? d >= 35 && 135 >= d ? "down" : "up" : "vertical"
    }, b.prototype.swipeEnd = function(a) {
        var c, d, b = this;
        if (b.dragging = !1, b.interrupted = !1, b.shouldClick = b.touchObject.swipeLength > 10 ? !1 : !0, void 0 === b.touchObject.curX) return !1;
        if (b.touchObject.edgeHit === !0 && b.$slider.trigger("edge", [b, b.swipeDirection()]), b.touchObject.swipeLength >= b.touchObject.minSwipe) {
            switch (d = b.swipeDirection()) {
                case "left":
                case "down":
                    c = b.options.swipeToSlide ? b.checkNavigable(b.currentSlide + b.getSlideCount()) : b.currentSlide + b.getSlideCount(), b.currentDirection = 0;
                    break;
                case "right":
                case "up":
                    c = b.options.swipeToSlide ? b.checkNavigable(b.currentSlide - b.getSlideCount()) : b.currentSlide - b.getSlideCount(), b.currentDirection = 1
            }
            "vertical" != d && (b.slideHandler(c), b.touchObject = {}, b.$slider.trigger("swipe", [b, d]))
        } else b.touchObject.startX !== b.touchObject.curX && (b.slideHandler(b.currentSlide), b.touchObject = {})
    }, b.prototype.swipeHandler = function(a) {
        var b = this;
        if (!(b.options.swipe === !1 || "ontouchend" in document && b.options.swipe === !1 || b.options.draggable === !1 && -1 !== a.type.indexOf("mouse"))) switch (b.touchObject.fingerCount = a.originalEvent && void 0 !== a.originalEvent.touches ? a.originalEvent.touches.length : 1, b.touchObject.minSwipe = b.listWidth / b.options.touchThreshold, b.options.verticalSwiping === !0 && (b.touchObject.minSwipe = b.listHeight / b.options.touchThreshold), a.data.action) {
            case "start":
                b.swipeStart(a);
                break;
            case "move":
                b.swipeMove(a);
                break;
            case "end":
                b.swipeEnd(a)
        }
    }, b.prototype.swipeMove = function(a) {
        var d, e, f, g, h, b = this;
        return h = void 0 !== a.originalEvent ? a.originalEvent.touches : null, !b.dragging || h && 1 !== h.length ? !1 : (d = b.getLeft(b.currentSlide), b.touchObject.curX = void 0 !== h ? h[0].pageX : a.clientX, b.touchObject.curY = void 0 !== h ? h[0].pageY : a.clientY, b.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(b.touchObject.curX - b.touchObject.startX, 2))), b.options.verticalSwiping === !0 && (b.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(b.touchObject.curY - b.touchObject.startY, 2)))), e = b.swipeDirection(), "vertical" !== e ? (void 0 !== a.originalEvent && b.touchObject.swipeLength > 4 && a.preventDefault(), g = (b.options.rtl === !1 ? 1 : -1) * (b.touchObject.curX > b.touchObject.startX ? 1 : -1), b.options.verticalSwiping === !0 && (g = b.touchObject.curY > b.touchObject.startY ? 1 : -1), f = b.touchObject.swipeLength, b.touchObject.edgeHit = !1, b.options.infinite === !1 && (0 === b.currentSlide && "right" === e || b.currentSlide >= b.getDotCount() && "left" === e) && (f = b.touchObject.swipeLength * b.options.edgeFriction, b.touchObject.edgeHit = !0), b.options.vertical === !1 ? b.swipeLeft = d + f * g : b.swipeLeft = d + f * (b.$list.height() / b.listWidth) * g, b.options.verticalSwiping === !0 && (b.swipeLeft = d + f * g), b.options.fade === !0 || b.options.touchMove === !1 ? !1 : b.animating === !0 ? (b.swipeLeft = null, !1) : void b.setCSS(b.swipeLeft)) : void 0)
    }, b.prototype.swipeStart = function(a) {
        var c, b = this;
        return b.interrupted = !0, 1 !== b.touchObject.fingerCount || b.slideCount <= b.options.slidesToShow ? (b.touchObject = {}, !1) : (void 0 !== a.originalEvent && void 0 !== a.originalEvent.touches && (c = a.originalEvent.touches[0]), b.touchObject.startX = b.touchObject.curX = void 0 !== c ? c.pageX : a.clientX, b.touchObject.startY = b.touchObject.curY = void 0 !== c ? c.pageY : a.clientY, void(b.dragging = !0))
    }, b.prototype.unfilterSlides = b.prototype.slickUnfilter = function() {
        var a = this;
        null !== a.$slidesCache && (a.unload(), a.$slideTrack.children(this.options.slide).detach(), a.$slidesCache.appendTo(a.$slideTrack), a.reinit())
    }, b.prototype.unload = function() {
        var b = this;
        a(".slick-cloned", b.$slider).remove(), b.$dots && b.$dots.remove(), b.$prevArrow && b.htmlExpr.test(b.options.prevArrow) && b.$prevArrow.remove(), b.$nextArrow && b.htmlExpr.test(b.options.nextArrow) && b.$nextArrow.remove(), b.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "")
    }, b.prototype.unslick = function(a) {
        var b = this;
        b.$slider.trigger("unslick", [b, a]), b.destroy()
    }, b.prototype.updateArrows = function() {
        var b, a = this;
        b = Math.floor(a.options.slidesToShow / 2), a.options.arrows === !0 && a.slideCount > a.options.slidesToShow && !a.options.infinite && (a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 0 === a.currentSlide ? (a.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true"), a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : a.currentSlide >= a.slideCount - a.options.slidesToShow && a.options.centerMode === !1 ? (a.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : a.currentSlide >= a.slideCount - 1 && a.options.centerMode === !0 && (a.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")))
    }, b.prototype.updateDots = function() {
        var a = this;
        null !== a.$dots && (a.$dots.find("li").removeClass("slick-active").attr("aria-hidden", "true"), a.$dots.find("li").eq(Math.floor(a.currentSlide / a.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden", "false"))
    }, b.prototype.visibility = function() {
        var a = this;
        a.options.autoplay && (document[a.hidden] ? a.interrupted = !0 : a.interrupted = !1)
    }, a.fn.slick = function() {
        var f, g, a = this,
            c = arguments[0],
            d = Array.prototype.slice.call(arguments, 1),
            e = a.length;
        for (f = 0; e > f; f++)
            if ("object" == typeof c || "undefined" == typeof c ? a[f].slick = new b(a[f], c) : g = a[f].slick[c].apply(a[f].slick, d), "undefined" != typeof g) return g;
        return a
    }
});
(function(factory) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory);
    } else if (typeof module !== "undefined" && module.exports) {
        module.exports = factory;
    } else {
        factory(jQuery, window, document);
    }
}(function($) {
    (function(init) {
        var _rjs = typeof define === "function" && define.amd,
            _njs = typeof module !== "undefined" && module.exports,
            _dlp = ("https:" == document.location.protocol) ? "https:" : "http:",
            _url = "cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js";
        if (!_rjs) {
            if (_njs) {
                require("jquery-mousewheel")($);
            } else {
                $.event.special.mousewheel || $("head").append(decodeURI("%3Cscript src=" + _dlp + "//" + _url + "%3E%3C/script%3E"));
            }
        }
        init();
    }(function() {
        var pluginNS = "mCustomScrollbar",
            pluginPfx = "mCS",
            defaultSelector = ".mCustomScrollbar",
            defaults = {
                setTop: 0,
                setLeft: 0,
                axis: "y",
                scrollbarPosition: "inside",
                scrollInertia: 950,
                autoDraggerLength: true,
                alwaysShowScrollbar: 0,
                snapOffset: 0,
                mouseWheel: {
                    enable: true,
                    scrollAmount: "auto",
                    axis: "y",
                    deltaFactor: "auto",
                    disableOver: ["select", "option", "keygen", "datalist", "textarea"]
                },
                scrollButtons: {
                    scrollType: "stepless",
                    scrollAmount: "auto"
                },
                keyboard: {
                    enable: true,
                    scrollType: "stepless",
                    scrollAmount: "auto"
                },
                contentTouchScroll: 25,
                documentTouchScroll: true,
                advanced: {
                    autoScrollOnFocus: "input,textarea,select,button,datalist,keygen,a[tabindex],area,object,[contenteditable='true']",
                    updateOnContentResize: true,
                    updateOnImageLoad: "auto",
                    autoUpdateTimeout: 60
                },
                theme: "light",
                callbacks: {
                    onTotalScrollOffset: 0,
                    onTotalScrollBackOffset: 0,
                    alwaysTriggerOffsets: true
                }
            },
            totalInstances = 0,
            liveTimers = {},
            oldIE = (window.attachEvent && !window.addEventListener) ? 1 : 0,
            touchActive = false,
            touchable, classes = ["mCSB_dragger_onDrag", "mCSB_scrollTools_onDrag", "mCS_img_loaded", "mCS_disabled", "mCS_destroyed", "mCS_no_scrollbar", "mCS-autoHide", "mCS-dir-rtl", "mCS_no_scrollbar_y", "mCS_no_scrollbar_x", "mCS_y_hidden", "mCS_x_hidden", "mCSB_draggerContainer", "mCSB_buttonUp", "mCSB_buttonDown", "mCSB_buttonLeft", "mCSB_buttonRight"],
            methods = {
                init: function(options) {
                    var options = $.extend(true, {}, defaults, options),
                        selector = _selector.call(this);
                    if (options.live) {
                        var liveSelector = options.liveSelector || this.selector || defaultSelector,
                            $liveSelector = $(liveSelector);
                        if (options.live === "off") {
                            removeLiveTimers(liveSelector);
                            return;
                        }
                        liveTimers[liveSelector] = setTimeout(function() {
                            $liveSelector.mCustomScrollbar(options);
                            if (options.live === "once" && $liveSelector.length) {
                                removeLiveTimers(liveSelector);
                            }
                        }, 500);
                    } else {
                        removeLiveTimers(liveSelector);
                    }
                    options.setWidth = (options.set_width) ? options.set_width : options.setWidth;
                    options.setHeight = (options.set_height) ? options.set_height : options.setHeight;
                    options.axis = (options.horizontalScroll) ? "x" : _findAxis(options.axis);
                    options.scrollInertia = options.scrollInertia > 0 && options.scrollInertia < 17 ? 17 : options.scrollInertia;
                    if (typeof options.mouseWheel !== "object" && options.mouseWheel == true) {
                        options.mouseWheel = {
                            enable: true,
                            scrollAmount: "auto",
                            axis: "y",
                            preventDefault: false,
                            deltaFactor: "auto",
                            normalizeDelta: false,
                            invert: false
                        }
                    }
                    options.mouseWheel.scrollAmount = !options.mouseWheelPixels ? options.mouseWheel.scrollAmount : options.mouseWheelPixels;
                    options.mouseWheel.normalizeDelta = !options.advanced.normalizeMouseWheelDelta ? options.mouseWheel.normalizeDelta : options.advanced.normalizeMouseWheelDelta;
                    options.scrollButtons.scrollType = _findScrollButtonsType(options.scrollButtons.scrollType);
                    _theme(options);
                    return $(selector).each(function() {
                        var $this = $(this);
                        if (!$this.data(pluginPfx)) {
                            $this.data(pluginPfx, {
                                idx: ++totalInstances,
                                opt: options,
                                scrollRatio: {
                                    y: null,
                                    x: null
                                },
                                overflowed: null,
                                contentReset: {
                                    y: null,
                                    x: null
                                },
                                bindEvents: false,
                                tweenRunning: false,
                                sequential: {},
                                langDir: $this.css("direction"),
                                cbOffsets: null,
                                trigger: null,
                                poll: {
                                    size: {
                                        o: 0,
                                        n: 0
                                    },
                                    img: {
                                        o: 0,
                                        n: 0
                                    },
                                    change: {
                                        o: 0,
                                        n: 0
                                    }
                                }
                            });
                            var d = $this.data(pluginPfx),
                                o = d.opt,
                                htmlDataAxis = $this.data("mcs-axis"),
                                htmlDataSbPos = $this.data("mcs-scrollbar-position"),
                                htmlDataTheme = $this.data("mcs-theme");
                            if (htmlDataAxis) {
                                o.axis = htmlDataAxis;
                            }
                            if (htmlDataSbPos) {
                                o.scrollbarPosition = htmlDataSbPos;
                            }
                            if (htmlDataTheme) {
                                o.theme = htmlDataTheme;
                                _theme(o);
                            }
                            _pluginMarkup.call(this);
                            if (d && o.callbacks.onCreate && typeof o.callbacks.onCreate === "function") {
                                o.callbacks.onCreate.call(this);
                            }
                            $("#mCSB_" + d.idx + "_container img:not(." + classes[2] + ")").addClass(classes[2]);
                            methods.update.call(null, $this);
                        }
                    });
                },
                update: function(el, cb) {
                    var selector = el || _selector.call(this);
                    return $(selector).each(function() {
                        var $this = $(this);
                        if ($this.data(pluginPfx)) {
                            var d = $this.data(pluginPfx),
                                o = d.opt,
                                mCSB_container = $("#mCSB_" + d.idx + "_container"),
                                mCustomScrollBox = $("#mCSB_" + d.idx),
                                mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")];
                            if (!mCSB_container.length) {
                                return;
                            }
                            if (d.tweenRunning) {
                                _stop($this);
                            }
                            if (cb && d && o.callbacks.onBeforeUpdate && typeof o.callbacks.onBeforeUpdate === "function") {
                                o.callbacks.onBeforeUpdate.call(this);
                            }
                            if ($this.hasClass(classes[3])) {
                                $this.removeClass(classes[3]);
                            }
                            if ($this.hasClass(classes[4])) {
                                $this.removeClass(classes[4]);
                            }
                            mCustomScrollBox.css("max-height", "none");
                            if (mCustomScrollBox.height() !== $this.height()) {
                                mCustomScrollBox.css("max-height", $this.height());
                            }
                            _expandContentHorizontally.call(this);
                            if (o.axis !== "y" && !o.advanced.autoExpandHorizontalScroll) {
                                mCSB_container.css("width", _contentWidth(mCSB_container));
                            }
                            d.overflowed = _overflowed.call(this);
                            _scrollbarVisibility.call(this);
                            if (o.autoDraggerLength) {
                                _setDraggerLength.call(this);
                            }
                            _scrollRatio.call(this);
                            _bindEvents.call(this);
                            var to = [Math.abs(mCSB_container[0].offsetTop), Math.abs(mCSB_container[0].offsetLeft)];
                            if (o.axis !== "x") {
                                if (!d.overflowed[0]) {
                                    _resetContentPosition.call(this);
                                    if (o.axis === "y") {
                                        _unbindEvents.call(this);
                                    } else if (o.axis === "yx" && d.overflowed[1]) {
                                        _scrollTo($this, to[1].toString(), {
                                            dir: "x",
                                            dur: 0,
                                            overwrite: "none"
                                        });
                                    }
                                } else if (mCSB_dragger[0].height() > mCSB_dragger[0].parent().height()) {
                                    _resetContentPosition.call(this);
                                } else {
                                    _scrollTo($this, to[0].toString(), {
                                        dir: "y",
                                        dur: 0,
                                        overwrite: "none"
                                    });
                                    d.contentReset.y = null;
                                }
                            }
                            if (o.axis !== "y") {
                                if (!d.overflowed[1]) {
                                    _resetContentPosition.call(this);
                                    if (o.axis === "x") {
                                        _unbindEvents.call(this);
                                    } else if (o.axis === "yx" && d.overflowed[0]) {
                                        _scrollTo($this, to[0].toString(), {
                                            dir: "y",
                                            dur: 0,
                                            overwrite: "none"
                                        });
                                    }
                                } else if (mCSB_dragger[1].width() > mCSB_dragger[1].parent().width()) {
                                    _resetContentPosition.call(this);
                                } else {
                                    _scrollTo($this, to[1].toString(), {
                                        dir: "x",
                                        dur: 0,
                                        overwrite: "none"
                                    });
                                    d.contentReset.x = null;
                                }
                            }
                            if (cb && d) {
                                if (cb === 2 && o.callbacks.onImageLoad && typeof o.callbacks.onImageLoad === "function") {
                                    o.callbacks.onImageLoad.call(this);
                                } else if (cb === 3 && o.callbacks.onSelectorChange && typeof o.callbacks.onSelectorChange === "function") {
                                    o.callbacks.onSelectorChange.call(this);
                                } else if (o.callbacks.onUpdate && typeof o.callbacks.onUpdate === "function") {
                                    o.callbacks.onUpdate.call(this);
                                }
                            }
                            _autoUpdate.call(this);
                        }
                    });
                },
                scrollTo: function(val, options) {
                    if (typeof val == "undefined" || val == null) {
                        return;
                    }
                    var selector = _selector.call(this);
                    return $(selector).each(function() {
                        var $this = $(this);
                        if ($this.data(pluginPfx)) {
                            var d = $this.data(pluginPfx),
                                o = d.opt,
                                methodDefaults = {
                                    trigger: "external",
                                    scrollInertia: o.scrollInertia,
                                    scrollEasing: "mcsEaseInOut",
                                    moveDragger: false,
                                    timeout: 60,
                                    callbacks: true,
                                    onStart: true,
                                    onUpdate: true,
                                    onComplete: true
                                },
                                methodOptions = $.extend(true, {}, methodDefaults, options),
                                to = _arr.call(this, val),
                                dur = methodOptions.scrollInertia > 0 && methodOptions.scrollInertia < 17 ? 17 : methodOptions.scrollInertia;
                            to[0] = _to.call(this, to[0], "y");
                            to[1] = _to.call(this, to[1], "x");
                            if (methodOptions.moveDragger) {
                                to[0] *= d.scrollRatio.y;
                                to[1] *= d.scrollRatio.x;
                            }
                            methodOptions.dur = _isTabHidden() ? 0 : dur;
                            setTimeout(function() {
                                if (to[0] !== null && typeof to[0] !== "undefined" && o.axis !== "x" && d.overflowed[0]) {
                                    methodOptions.dir = "y";
                                    methodOptions.overwrite = "all";
                                    _scrollTo($this, to[0].toString(), methodOptions);
                                }
                                if (to[1] !== null && typeof to[1] !== "undefined" && o.axis !== "y" && d.overflowed[1]) {
                                    methodOptions.dir = "x";
                                    methodOptions.overwrite = "none";
                                    _scrollTo($this, to[1].toString(), methodOptions);
                                }
                            }, methodOptions.timeout);
                        }
                    });
                },
                stop: function() {
                    var selector = _selector.call(this);
                    return $(selector).each(function() {
                        var $this = $(this);
                        if ($this.data(pluginPfx)) {
                            _stop($this);
                        }
                    });
                },
                disable: function(r) {
                    var selector = _selector.call(this);
                    return $(selector).each(function() {
                        var $this = $(this);
                        if ($this.data(pluginPfx)) {
                            var d = $this.data(pluginPfx);
                            _autoUpdate.call(this, "remove");
                            _unbindEvents.call(this);
                            if (r) {
                                _resetContentPosition.call(this);
                            }
                            _scrollbarVisibility.call(this, true);
                            $this.addClass(classes[3]);
                        }
                    });
                },
                destroy: function() {
                    var selector = _selector.call(this);
                    return $(selector).each(function() {
                        var $this = $(this);
                        if ($this.data(pluginPfx)) {
                            var d = $this.data(pluginPfx),
                                o = d.opt,
                                mCustomScrollBox = $("#mCSB_" + d.idx),
                                mCSB_container = $("#mCSB_" + d.idx + "_container"),
                                scrollbar = $(".mCSB_" + d.idx + "_scrollbar");
                            if (o.live) {
                                removeLiveTimers(o.liveSelector || $(selector).selector);
                            }
                            _autoUpdate.call(this, "remove");
                            _unbindEvents.call(this);
                            _resetContentPosition.call(this);
                            $this.removeData(pluginPfx);
                            _delete(this, "mcs");
                            scrollbar.remove();
                            mCSB_container.find("img." + classes[2]).removeClass(classes[2]);
                            mCustomScrollBox.replaceWith(mCSB_container.contents());
                            $this.removeClass(pluginNS + " _" + pluginPfx + "_" + d.idx + " " + classes[6] + " " + classes[7] + " " + classes[5] + " " + classes[3]).addClass(classes[4]);
                        }
                    });
                }
            },
            _selector = function() {
                return (typeof $(this) !== "object" || $(this).length < 1) ? defaultSelector : this;
            },
            _theme = function(obj) {
                var fixedSizeScrollbarThemes = ["rounded", "rounded-dark", "rounded-dots", "rounded-dots-dark"],
                    nonExpandedScrollbarThemes = ["rounded-dots", "rounded-dots-dark", "3d", "3d-dark", "3d-thick", "3d-thick-dark", "inset", "inset-dark", "inset-2", "inset-2-dark", "inset-3", "inset-3-dark"],
                    disabledScrollButtonsThemes = ["minimal", "minimal-dark"],
                    enabledAutoHideScrollbarThemes = ["minimal", "minimal-dark"],
                    scrollbarPositionOutsideThemes = ["minimal", "minimal-dark"];
                obj.autoDraggerLength = $.inArray(obj.theme, fixedSizeScrollbarThemes) > -1 ? false : obj.autoDraggerLength;
                obj.autoExpandScrollbar = $.inArray(obj.theme, nonExpandedScrollbarThemes) > -1 ? false : obj.autoExpandScrollbar;
                obj.scrollButtons.enable = $.inArray(obj.theme, disabledScrollButtonsThemes) > -1 ? false : obj.scrollButtons.enable;
                obj.autoHideScrollbar = $.inArray(obj.theme, enabledAutoHideScrollbarThemes) > -1 ? true : obj.autoHideScrollbar;
                obj.scrollbarPosition = $.inArray(obj.theme, scrollbarPositionOutsideThemes) > -1 ? "outside" : obj.scrollbarPosition;
            },
            removeLiveTimers = function(selector) {
                if (liveTimers[selector]) {
                    clearTimeout(liveTimers[selector]);
                    _delete(liveTimers, selector);
                }
            },
            _findAxis = function(val) {
                return (val === "yx" || val === "xy" || val === "auto") ? "yx" : (val === "x" || val === "horizontal") ? "x" : "y";
            },
            _findScrollButtonsType = function(val) {
                return (val === "stepped" || val === "pixels" || val === "step" || val === "click") ? "stepped" : "stepless";
            },
            _pluginMarkup = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    expandClass = o.autoExpandScrollbar ? " " + classes[1] + "_expand" : "",
                    scrollbar = ["<div id='mCSB_" + d.idx + "_scrollbar_vertical' class='mCSB_scrollTools mCSB_" + d.idx + "_scrollbar mCS-" + o.theme + " mCSB_scrollTools_vertical" + expandClass + "'><div class='" + classes[12] + "'><div id='mCSB_" + d.idx + "_dragger_vertical' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>", "<div id='mCSB_" + d.idx + "_scrollbar_horizontal' class='mCSB_scrollTools mCSB_" + d.idx + "_scrollbar mCS-" + o.theme + " mCSB_scrollTools_horizontal" + expandClass + "'><div class='" + classes[12] + "'><div id='mCSB_" + d.idx + "_dragger_horizontal' class='mCSB_dragger' style='position:absolute;'><div class='mCSB_dragger_bar' /></div><div class='mCSB_draggerRail' /></div></div>"],
                    wrapperClass = o.axis === "yx" ? "mCSB_vertical_horizontal" : o.axis === "x" ? "mCSB_horizontal" : "mCSB_vertical",
                    scrollbars = o.axis === "yx" ? scrollbar[0] + scrollbar[1] : o.axis === "x" ? scrollbar[1] : scrollbar[0],
                    contentWrapper = o.axis === "yx" ? "<div id='mCSB_" + d.idx + "_container_wrapper' class='mCSB_container_wrapper' />" : "",
                    autoHideClass = o.autoHideScrollbar ? " " + classes[6] : "",
                    scrollbarDirClass = (o.axis !== "x" && d.langDir === "rtl") ? " " + classes[7] : "";
                if (o.setWidth) {
                    $this.css("width", o.setWidth);
                }
                if (o.setHeight) {
                    $this.css("height", o.setHeight);
                }
                o.setLeft = (o.axis !== "y" && d.langDir === "rtl") ? "989999px" : o.setLeft;
                $this.addClass(pluginNS + " _" + pluginPfx + "_" + d.idx + autoHideClass + scrollbarDirClass).wrapInner("<div id='mCSB_" + d.idx + "' class='mCustomScrollBox mCS-" + o.theme + " " + wrapperClass + "'><div id='mCSB_" + d.idx + "_container' class='mCSB_container' style='position:relative; top:" + o.setTop + "; left:" + o.setLeft + ";' dir='" + d.langDir + "' /></div>");
                var mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container");
                if (o.axis !== "y" && !o.advanced.autoExpandHorizontalScroll) {
                    mCSB_container.css("width", _contentWidth(mCSB_container));
                }
                if (o.scrollbarPosition === "outside") {
                    if ($this.css("position") === "static") {
                        $this.css("position", "relative");
                    }
                    $this.css("overflow", "visible");
                    mCustomScrollBox.addClass("mCSB_outside").after(scrollbars);
                } else {
                    mCustomScrollBox.addClass("mCSB_inside").append(scrollbars);
                    mCSB_container.wrap(contentWrapper);
                }
                _scrollButtons.call(this);
                var mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")];
                mCSB_dragger[0].css("min-height", mCSB_dragger[0].height());
                mCSB_dragger[1].css("min-width", mCSB_dragger[1].width());
            },
            _contentWidth = function(el) {
                var val = [el[0].scrollWidth, Math.max.apply(Math, el.children().map(function() {
                        return $(this).outerWidth(true);
                    }).get())],
                    w = el.parent().width();
                return val[0] > w ? val[0] : val[1] > w ? val[1] : "100%";
            },
            _expandContentHorizontally = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    mCSB_container = $("#mCSB_" + d.idx + "_container");
                if (o.advanced.autoExpandHorizontalScroll && o.axis !== "y") {
                    mCSB_container.css({
                        "width": "auto",
                        "min-width": 0,
                        "overflow-x": "scroll"
                    });
                    var w = Math.ceil(mCSB_container[0].scrollWidth);
                    if (o.advanced.autoExpandHorizontalScroll === 3 || (o.advanced.autoExpandHorizontalScroll !== 2 && w > mCSB_container.parent().width())) {
                        mCSB_container.css({
                            "width": w,
                            "min-width": "100%",
                            "overflow-x": "inherit"
                        });
                    } else {
                        mCSB_container.css({
                            "overflow-x": "inherit",
                            "position": "absolute"
                        }).wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />").css({
                            "width": (Math.ceil(mCSB_container[0].getBoundingClientRect().right + 0.4) - Math.floor(mCSB_container[0].getBoundingClientRect().left)),
                            "min-width": "100%",
                            "position": "relative"
                        }).unwrap();
                    }
                }
            },
            _scrollButtons = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    mCSB_scrollTools = $(".mCSB_" + d.idx + "_scrollbar:first"),
                    tabindex = !_isNumeric(o.scrollButtons.tabindex) ? "" : "tabindex='" + o.scrollButtons.tabindex + "'",
                    btnHTML = ["<a href='#' class='" + classes[13] + "' " + tabindex + " />", "<a href='#' class='" + classes[14] + "' " + tabindex + " />", "<a href='#' class='" + classes[15] + "' " + tabindex + " />", "<a href='#' class='" + classes[16] + "' " + tabindex + " />"],
                    btn = [(o.axis === "x" ? btnHTML[2] : btnHTML[0]), (o.axis === "x" ? btnHTML[3] : btnHTML[1]), btnHTML[2], btnHTML[3]];
                if (o.scrollButtons.enable) {
                    mCSB_scrollTools.prepend(btn[0]).append(btn[1]).next(".mCSB_scrollTools").prepend(btn[2]).append(btn[3]);
                }
            },
            _setDraggerLength = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")],
                    ratio = [mCustomScrollBox.height() / mCSB_container.outerHeight(false), mCustomScrollBox.width() / mCSB_container.outerWidth(false)],
                    l = [parseInt(mCSB_dragger[0].css("min-height")), Math.round(ratio[0] * mCSB_dragger[0].parent().height()), parseInt(mCSB_dragger[1].css("min-width")), Math.round(ratio[1] * mCSB_dragger[1].parent().width())],
                    h = oldIE && (l[1] < l[0]) ? l[0] : l[1],
                    w = oldIE && (l[3] < l[2]) ? l[2] : l[3];
                mCSB_dragger[0].css({
                    "height": h,
                    "max-height": (mCSB_dragger[0].parent().height() - 10)
                }).find(".mCSB_dragger_bar").css({
                    "line-height": l[0] + "px"
                });
                mCSB_dragger[1].css({
                    "width": w,
                    "max-width": (mCSB_dragger[1].parent().width() - 10)
                });
            },
            _scrollRatio = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")],
                    scrollAmount = [mCSB_container.outerHeight(false) - mCustomScrollBox.height(), mCSB_container.outerWidth(false) - mCustomScrollBox.width()],
                    ratio = [scrollAmount[0] / (mCSB_dragger[0].parent().height() - mCSB_dragger[0].height()), scrollAmount[1] / (mCSB_dragger[1].parent().width() - mCSB_dragger[1].width())];
                d.scrollRatio = {
                    y: ratio[0],
                    x: ratio[1]
                };
            },
            _onDragClasses = function(el, action, xpnd) {
                var expandClass = xpnd ? classes[0] + "_expanded" : "",
                    scrollbar = el.closest(".mCSB_scrollTools");
                if (action === "active") {
                    el.toggleClass(classes[0] + " " + expandClass);
                    scrollbar.toggleClass(classes[1]);
                    el[0]._draggable = el[0]._draggable ? 0 : 1;
                } else {
                    if (!el[0]._draggable) {
                        if (action === "hide") {
                            el.removeClass(classes[0]);
                            scrollbar.removeClass(classes[1]);
                        } else {
                            el.addClass(classes[0]);
                            scrollbar.addClass(classes[1]);
                        }
                    }
                }
            },
            _overflowed = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    contentHeight = d.overflowed == null ? mCSB_container.height() : mCSB_container.outerHeight(false),
                    contentWidth = d.overflowed == null ? mCSB_container.width() : mCSB_container.outerWidth(false),
                    h = mCSB_container[0].scrollHeight,
                    w = mCSB_container[0].scrollWidth;
                if (h > contentHeight) {
                    contentHeight = h;
                }
                if (w > contentWidth) {
                    contentWidth = w;
                }
                return [contentHeight > mCustomScrollBox.height(), contentWidth > mCustomScrollBox.width()];
            },
            _resetContentPosition = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")];
                _stop($this);
                if ((o.axis !== "x" && !d.overflowed[0]) || (o.axis === "y" && d.overflowed[0])) {
                    mCSB_dragger[0].add(mCSB_container).css("top", 0);
                    _scrollTo($this, "_resetY");
                }
                if ((o.axis !== "y" && !d.overflowed[1]) || (o.axis === "x" && d.overflowed[1])) {
                    var cx = dx = 0;
                    if (d.langDir === "rtl") {
                        cx = mCustomScrollBox.width() - mCSB_container.outerWidth(false);
                        dx = Math.abs(cx / d.scrollRatio.x);
                    }
                    mCSB_container.css("left", cx);
                    mCSB_dragger[1].css("left", dx);
                    _scrollTo($this, "_resetX");
                }
            },
            _bindEvents = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt;
                if (!d.bindEvents) {
                    _draggable.call(this);
                    if (o.contentTouchScroll) {
                        _contentDraggable.call(this);
                    }
                    _selectable.call(this);
                    if (o.mouseWheel.enable) {
                        function _mwt() {
                            mousewheelTimeout = setTimeout(function() {
                                if (!$.event.special.mousewheel) {
                                    _mwt();
                                } else {
                                    clearTimeout(mousewheelTimeout);
                                    _mousewheel.call($this[0]);
                                }
                            }, 100);
                        }
                        var mousewheelTimeout;
                        _mwt();
                    }
                    _draggerRail.call(this);
                    _wrapperScroll.call(this);
                    if (o.advanced.autoScrollOnFocus) {
                        _focus.call(this);
                    }
                    if (o.scrollButtons.enable) {
                        _buttons.call(this);
                    }
                    if (o.keyboard.enable) {
                        _keyboard.call(this);
                    }
                    d.bindEvents = true;
                }
            },
            _unbindEvents = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    namespace = pluginPfx + "_" + d.idx,
                    sb = ".mCSB_" + d.idx + "_scrollbar",
                    sel = $("#mCSB_" + d.idx + ",#mCSB_" + d.idx + "_container,#mCSB_" + d.idx + "_container_wrapper," + sb + " ." + classes[12] + ",#mCSB_" + d.idx + "_dragger_vertical,#mCSB_" + d.idx + "_dragger_horizontal," + sb + ">a"),
                    mCSB_container = $("#mCSB_" + d.idx + "_container");
                if (o.advanced.releaseDraggableSelectors) {
                    sel.add($(o.advanced.releaseDraggableSelectors));
                }
                if (o.advanced.extraDraggableSelectors) {
                    sel.add($(o.advanced.extraDraggableSelectors));
                }
                if (d.bindEvents) {
                    $(document).add($(!_canAccessIFrame() || top.document)).unbind("." + namespace);
                    sel.each(function() {
                        $(this).unbind("." + namespace);
                    });
                    clearTimeout($this[0]._focusTimeout);
                    _delete($this[0], "_focusTimeout");
                    clearTimeout(d.sequential.step);
                    _delete(d.sequential, "step");
                    clearTimeout(mCSB_container[0].onCompleteTimeout);
                    _delete(mCSB_container[0], "onCompleteTimeout");
                    d.bindEvents = false;
                }
            },
            _scrollbarVisibility = function(disabled) {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    contentWrapper = $("#mCSB_" + d.idx + "_container_wrapper"),
                    content = contentWrapper.length ? contentWrapper : $("#mCSB_" + d.idx + "_container"),
                    scrollbar = [$("#mCSB_" + d.idx + "_scrollbar_vertical"), $("#mCSB_" + d.idx + "_scrollbar_horizontal")],
                    mCSB_dragger = [scrollbar[0].find(".mCSB_dragger"), scrollbar[1].find(".mCSB_dragger")];
                if (o.axis !== "x") {
                    if (d.overflowed[0] && !disabled) {
                        scrollbar[0].add(mCSB_dragger[0]).add(scrollbar[0].children("a")).css("display", "block");
                        content.removeClass(classes[8] + " " + classes[10]);
                    } else {
                        if (o.alwaysShowScrollbar) {
                            if (o.alwaysShowScrollbar !== 2) {
                                mCSB_dragger[0].css("display", "none");
                            }
                            content.removeClass(classes[10]);
                        } else {
                            scrollbar[0].css("display", "none");
                            content.addClass(classes[10]);
                        }
                        content.addClass(classes[8]);
                    }
                }
                if (o.axis !== "y") {
                    if (d.overflowed[1] && !disabled) {
                        scrollbar[1].add(mCSB_dragger[1]).add(scrollbar[1].children("a")).css("display", "block");
                        content.removeClass(classes[9] + " " + classes[11]);
                    } else {
                        if (o.alwaysShowScrollbar) {
                            if (o.alwaysShowScrollbar !== 2) {
                                mCSB_dragger[1].css("display", "none");
                            }
                            content.removeClass(classes[11]);
                        } else {
                            scrollbar[1].css("display", "none");
                            content.addClass(classes[11]);
                        }
                        content.addClass(classes[9]);
                    }
                }
                if (!d.overflowed[0] && !d.overflowed[1]) {
                    $this.addClass(classes[5]);
                } else {
                    $this.removeClass(classes[5]);
                }
            },
            _coordinates = function(e) {
                var t = e.type,
                    o = e.target.ownerDocument !== document && frameElement !== null ? [$(frameElement).offset().top, $(frameElement).offset().left] : null,
                    io = _canAccessIFrame() && e.target.ownerDocument !== top.document && frameElement !== null ? [$(e.view.frameElement).offset().top, $(e.view.frameElement).offset().left] : [0, 0];
                switch (t) {
                    case "pointerdown":
                    case "MSPointerDown":
                    case "pointermove":
                    case "MSPointerMove":
                    case "pointerup":
                    case "MSPointerUp":
                        return o ? [e.originalEvent.pageY - o[0] + io[0], e.originalEvent.pageX - o[1] + io[1], false] : [e.originalEvent.pageY, e.originalEvent.pageX, false];
                        break;
                    case "touchstart":
                    case "touchmove":
                    case "touchend":
                        var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0],
                            touches = e.originalEvent.touches.length || e.originalEvent.changedTouches.length;
                        return e.target.ownerDocument !== document ? [touch.screenY, touch.screenX, touches > 1] : [touch.pageY, touch.pageX, touches > 1];
                        break;
                    default:
                        return o ? [e.pageY - o[0] + io[0], e.pageX - o[1] + io[1], false] : [e.pageY, e.pageX, false];
                }
            },
            _draggable = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    namespace = pluginPfx + "_" + d.idx,
                    draggerId = ["mCSB_" + d.idx + "_dragger_vertical", "mCSB_" + d.idx + "_dragger_horizontal"],
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    mCSB_dragger = $("#" + draggerId[0] + ",#" + draggerId[1]),
                    draggable, dragY, dragX, rds = o.advanced.releaseDraggableSelectors ? mCSB_dragger.add($(o.advanced.releaseDraggableSelectors)) : mCSB_dragger,
                    eds = o.advanced.extraDraggableSelectors ? $(!_canAccessIFrame() || top.document).add($(o.advanced.extraDraggableSelectors)) : $(!_canAccessIFrame() || top.document);
                mCSB_dragger.bind("contextmenu." + namespace, function(e) {
                    e.preventDefault();
                }).bind("mousedown." + namespace + " touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace, function(e) {
                    e.stopImmediatePropagation();
                    e.preventDefault();
                    if (!_mouseBtnLeft(e)) {
                        return;
                    }
                    touchActive = true;
                    if (oldIE) {
                        document.onselectstart = function() {
                            return false;
                        }
                    }
                    _iframe.call(mCSB_container, false);
                    _stop($this);
                    draggable = $(this);
                    var offset = draggable.offset(),
                        y = _coordinates(e)[0] - offset.top,
                        x = _coordinates(e)[1] - offset.left,
                        h = draggable.height() + offset.top,
                        w = draggable.width() + offset.left;
                    if (y < h && y > 0 && x < w && x > 0) {
                        dragY = y;
                        dragX = x;
                    }
                    _onDragClasses(draggable, "active", o.autoExpandScrollbar);
                }).bind("touchmove." + namespace, function(e) {
                    e.stopImmediatePropagation();
                    e.preventDefault();
                    var offset = draggable.offset(),
                        y = _coordinates(e)[0] - offset.top,
                        x = _coordinates(e)[1] - offset.left;
                    _drag(dragY, dragX, y, x);
                });
                $(document).add(eds).bind("mousemove." + namespace + " pointermove." + namespace + " MSPointerMove." + namespace, function(e) {
                    if (draggable) {
                        var offset = draggable.offset(),
                            y = _coordinates(e)[0] - offset.top,
                            x = _coordinates(e)[1] - offset.left;
                        if (dragY === y && dragX === x) {
                            return;
                        }
                        _drag(dragY, dragX, y, x);
                    }
                }).add(rds).bind("mouseup." + namespace + " touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace, function(e) {
                    if (draggable) {
                        _onDragClasses(draggable, "active", o.autoExpandScrollbar);
                        draggable = null;
                    }
                    touchActive = false;
                    if (oldIE) {
                        document.onselectstart = null;
                    }
                    _iframe.call(mCSB_container, true);
                });

                function _drag(dragY, dragX, y, x) {
                    mCSB_container[0].idleTimer = o.scrollInertia < 233 ? 250 : 0;
                    if (draggable.attr("id") === draggerId[1]) {
                        var dir = "x",
                            to = ((draggable[0].offsetLeft - dragX) + x) * d.scrollRatio.x;
                    } else {
                        var dir = "y",
                            to = ((draggable[0].offsetTop - dragY) + y) * d.scrollRatio.y;
                    }
                    _scrollTo($this, to.toString(), {
                        dir: dir,
                        drag: true
                    });
                }
            },
            _contentDraggable = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    namespace = pluginPfx + "_" + d.idx,
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")],
                    draggable, dragY, dragX, touchStartY, touchStartX, touchMoveY = [],
                    touchMoveX = [],
                    startTime, runningTime, endTime, distance, speed, amount, durA = 0,
                    durB, overwrite = o.axis === "yx" ? "none" : "all",
                    touchIntent = [],
                    touchDrag, docDrag, iframe = mCSB_container.find("iframe"),
                    events = ["touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace, "touchmove." + namespace + " pointermove." + namespace + " MSPointerMove." + namespace, "touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace],
                    touchAction = document.body.style.touchAction !== undefined && document.body.style.touchAction !== "";
                mCSB_container.bind(events[0], function(e) {
                    _onTouchstart(e);
                }).bind(events[1], function(e) {
                    _onTouchmove(e);
                });
                mCustomScrollBox.bind(events[0], function(e) {
                    _onTouchstart2(e);
                }).bind(events[2], function(e) {
                    _onTouchend(e);
                });
                if (iframe.length) {
                    iframe.each(function() {
                        $(this).bind("load", function() {
                            if (_canAccessIFrame(this)) {
                                $(this.contentDocument || this.contentWindow.document).bind(events[0], function(e) {
                                    _onTouchstart(e);
                                    _onTouchstart2(e);
                                }).bind(events[1], function(e) {
                                    _onTouchmove(e);
                                }).bind(events[2], function(e) {
                                    _onTouchend(e);
                                });
                            }
                        });
                    });
                }

                function _onTouchstart(e) {
                    if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
                        touchable = 0;
                        return;
                    }
                    touchable = 1;
                    touchDrag = 0;
                    docDrag = 0;
                    draggable = 1;
                    $this.removeClass("mCS_touch_action");
                    var offset = mCSB_container.offset();
                    dragY = _coordinates(e)[0] - offset.top;
                    dragX = _coordinates(e)[1] - offset.left;
                    touchIntent = [_coordinates(e)[0], _coordinates(e)[1]];
                }

                function _onTouchmove(e) {
                    if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
                        return;
                    }
                    if (!o.documentTouchScroll) {
                        e.preventDefault();
                    }
                    e.stopImmediatePropagation();
                    if (docDrag && !touchDrag) {
                        return;
                    }
                    if (draggable) {
                        runningTime = _getTime();
                        var offset = mCustomScrollBox.offset(),
                            y = _coordinates(e)[0] - offset.top,
                            x = _coordinates(e)[1] - offset.left,
                            easing = "mcsLinearOut";
                        touchMoveY.push(y);
                        touchMoveX.push(x);
                        touchIntent[2] = Math.abs(_coordinates(e)[0] - touchIntent[0]);
                        touchIntent[3] = Math.abs(_coordinates(e)[1] - touchIntent[1]);
                        if (d.overflowed[0]) {
                            var limit = mCSB_dragger[0].parent().height() - mCSB_dragger[0].height(),
                                prevent = ((dragY - y) > 0 && (y - dragY) > -(limit * d.scrollRatio.y) && (touchIntent[3] * 2 < touchIntent[2] || o.axis === "yx"));
                        }
                        if (d.overflowed[1]) {
                            var limitX = mCSB_dragger[1].parent().width() - mCSB_dragger[1].width(),
                                preventX = ((dragX - x) > 0 && (x - dragX) > -(limitX * d.scrollRatio.x) && (touchIntent[2] * 2 < touchIntent[3] || o.axis === "yx"));
                        }
                        if (prevent || preventX) {
                            if (!touchAction) {
                                e.preventDefault();
                            }
                            touchDrag = 1;
                        } else {
                            docDrag = 1;
                            $this.addClass("mCS_touch_action");
                        }
                        if (touchAction) {
                            e.preventDefault();
                        }
                        amount = o.axis === "yx" ? [(dragY - y), (dragX - x)] : o.axis === "x" ? [null, (dragX - x)] : [(dragY - y), null];
                        mCSB_container[0].idleTimer = 250;
                        if (d.overflowed[0]) {
                            _drag(amount[0], durA, easing, "y", "all", true);
                        }
                        if (d.overflowed[1]) {
                            _drag(amount[1], durA, easing, "x", overwrite, true);
                        }
                    }
                }

                function _onTouchstart2(e) {
                    if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
                        touchable = 0;
                        return;
                    }
                    touchable = 1;
                    e.stopImmediatePropagation();
                    _stop($this);
                    startTime = _getTime();
                    var offset = mCustomScrollBox.offset();
                    touchStartY = _coordinates(e)[0] - offset.top;
                    touchStartX = _coordinates(e)[1] - offset.left;
                    touchMoveY = [];
                    touchMoveX = [];
                }

                function _onTouchend(e) {
                    if (!_pointerTouch(e) || touchActive || _coordinates(e)[2]) {
                        return;
                    }
                    draggable = 0;
                    e.stopImmediatePropagation();
                    touchDrag = 0;
                    docDrag = 0;
                    endTime = _getTime();
                    var offset = mCustomScrollBox.offset(),
                        y = _coordinates(e)[0] - offset.top,
                        x = _coordinates(e)[1] - offset.left;
                    if ((endTime - runningTime) > 30) {
                        return;
                    }
                    speed = 1000 / (endTime - startTime);
                    var easing = "mcsEaseOut",
                        slow = speed < 2.5,
                        diff = slow ? [touchMoveY[touchMoveY.length - 2], touchMoveX[touchMoveX.length - 2]] : [0, 0];
                    distance = slow ? [(y - diff[0]), (x - diff[1])] : [y - touchStartY, x - touchStartX];
                    var absDistance = [Math.abs(distance[0]), Math.abs(distance[1])];
                    speed = slow ? [Math.abs(distance[0] / 4), Math.abs(distance[1] / 4)] : [speed, speed];
                    var a = [Math.abs(mCSB_container[0].offsetTop) - (distance[0] * _m((absDistance[0] / speed[0]), speed[0])), Math.abs(mCSB_container[0].offsetLeft) - (distance[1] * _m((absDistance[1] / speed[1]), speed[1]))];
                    amount = o.axis === "yx" ? [a[0], a[1]] : o.axis === "x" ? [null, a[1]] : [a[0], null];
                    durB = [(absDistance[0] * 4) + o.scrollInertia, (absDistance[1] * 4) + o.scrollInertia];
                    var md = parseInt(o.contentTouchScroll) || 0;
                    amount[0] = absDistance[0] > md ? amount[0] : 0;
                    amount[1] = absDistance[1] > md ? amount[1] : 0;
                    if (d.overflowed[0]) {
                        _drag(amount[0], durB[0], easing, "y", overwrite, false);
                    }
                    if (d.overflowed[1]) {
                        _drag(amount[1], durB[1], easing, "x", overwrite, false);
                    }
                }

                function _m(ds, s) {
                    var r = [s * 1.5, s * 2, s / 1.5, s / 2];
                    if (ds > 90) {
                        return s > 4 ? r[0] : r[3];
                    } else if (ds > 60) {
                        return s > 3 ? r[3] : r[2];
                    } else if (ds > 30) {
                        return s > 8 ? r[1] : s > 6 ? r[0] : s > 4 ? s : r[2];
                    } else {
                        return s > 8 ? s : r[3];
                    }
                }

                function _drag(amount, dur, easing, dir, overwrite, drag) {
                    if (!amount) {
                        return;
                    }
                    _scrollTo($this, amount.toString(), {
                        dur: dur,
                        scrollEasing: easing,
                        dir: dir,
                        overwrite: overwrite,
                        drag: drag
                    });
                }
            },
            _selectable = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    seq = d.sequential,
                    namespace = pluginPfx + "_" + d.idx,
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    wrapper = mCSB_container.parent(),
                    action;
                mCSB_container.bind("mousedown." + namespace, function(e) {
                    if (touchable) {
                        return;
                    }
                    if (!action) {
                        action = 1;
                        touchActive = true;
                    }
                }).add(document).bind("mousemove." + namespace, function(e) {
                    if (!touchable && action && _sel()) {
                        var offset = mCSB_container.offset(),
                            y = _coordinates(e)[0] - offset.top + mCSB_container[0].offsetTop,
                            x = _coordinates(e)[1] - offset.left + mCSB_container[0].offsetLeft;
                        if (y > 0 && y < wrapper.height() && x > 0 && x < wrapper.width()) {
                            if (seq.step) {
                                _seq("off", null, "stepped");
                            }
                        } else {
                            if (o.axis !== "x" && d.overflowed[0]) {
                                if (y < 0) {
                                    _seq("on", 38);
                                } else if (y > wrapper.height()) {
                                    _seq("on", 40);
                                }
                            }
                            if (o.axis !== "y" && d.overflowed[1]) {
                                if (x < 0) {
                                    _seq("on", 37);
                                } else if (x > wrapper.width()) {
                                    _seq("on", 39);
                                }
                            }
                        }
                    }
                }).bind("mouseup." + namespace + " dragend." + namespace, function(e) {
                    if (touchable) {
                        return;
                    }
                    if (action) {
                        action = 0;
                        _seq("off", null);
                    }
                    touchActive = false;
                });

                function _sel() {
                    return window.getSelection ? window.getSelection().toString() : document.selection && document.selection.type != "Control" ? document.selection.createRange().text : 0;
                }

                function _seq(a, c, s) {
                    seq.type = s && action ? "stepped" : "stepless";
                    seq.scrollAmount = 10;
                    _sequentialScroll($this, a, c, "mcsLinearOut", s ? 60 : null);
                }
            },
            _mousewheel = function() {
                if (!$(this).data(pluginPfx)) {
                    return;
                }
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    namespace = pluginPfx + "_" + d.idx,
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_dragger = [$("#mCSB_" + d.idx + "_dragger_vertical"), $("#mCSB_" + d.idx + "_dragger_horizontal")],
                    iframe = $("#mCSB_" + d.idx + "_container").find("iframe");
                if (iframe.length) {
                    iframe.each(function() {
                        $(this).bind("load", function() {
                            if (_canAccessIFrame(this)) {
                                $(this.contentDocument || this.contentWindow.document).bind("mousewheel." + namespace, function(e, delta) {
                                    _onMousewheel(e, delta);
                                });
                            }
                        });
                    });
                }
                mCustomScrollBox.bind("mousewheel." + namespace, function(e, delta) {
                    _onMousewheel(e, delta);
                });

                function _onMousewheel(e, delta) {
                    _stop($this);
                    if (_disableMousewheel($this, e.target)) {
                        return;
                    }
                    var deltaFactor = o.mouseWheel.deltaFactor !== "auto" ? parseInt(o.mouseWheel.deltaFactor) : (oldIE && e.deltaFactor < 100) ? 100 : e.deltaFactor || 100,
                        dur = o.scrollInertia;
                    if (o.axis === "x" || o.mouseWheel.axis === "x") {
                        var dir = "x",
                            px = [Math.round(deltaFactor * d.scrollRatio.x), parseInt(o.mouseWheel.scrollAmount)],
                            amount = o.mouseWheel.scrollAmount !== "auto" ? px[1] : px[0] >= mCustomScrollBox.width() ? mCustomScrollBox.width() * 0.9 : px[0],
                            contentPos = Math.abs($("#mCSB_" + d.idx + "_container")[0].offsetLeft),
                            draggerPos = mCSB_dragger[1][0].offsetLeft,
                            limit = mCSB_dragger[1].parent().width() - mCSB_dragger[1].width(),
                            dlt = o.mouseWheel.axis === "y" ? (e.deltaY || delta) : e.deltaX;
                    } else {
                        var dir = "y",
                            px = [Math.round(deltaFactor * d.scrollRatio.y), parseInt(o.mouseWheel.scrollAmount)],
                            amount = o.mouseWheel.scrollAmount !== "auto" ? px[1] : px[0] >= mCustomScrollBox.height() ? mCustomScrollBox.height() * 0.9 : px[0],
                            contentPos = Math.abs($("#mCSB_" + d.idx + "_container")[0].offsetTop),
                            draggerPos = mCSB_dragger[0][0].offsetTop,
                            limit = mCSB_dragger[0].parent().height() - mCSB_dragger[0].height(),
                            dlt = e.deltaY || delta;
                    }
                    if ((dir === "y" && !d.overflowed[0]) || (dir === "x" && !d.overflowed[1])) {
                        return;
                    }
                    if (o.mouseWheel.invert || e.webkitDirectionInvertedFromDevice) {
                        dlt = -dlt;
                    }
                    if (o.mouseWheel.normalizeDelta) {
                        dlt = dlt < 0 ? -1 : 1;
                    }
                    if ((dlt > 0 && draggerPos !== 0) || (dlt < 0 && draggerPos !== limit) || o.mouseWheel.preventDefault) {
                        e.stopImmediatePropagation();
                        e.preventDefault();
                    }
                    if (e.deltaFactor < 5 && !o.mouseWheel.normalizeDelta) {
                        amount = e.deltaFactor;
                        dur = 17;
                    }
                    _scrollTo($this, (contentPos - (dlt * amount)).toString(), {
                        dir: dir,
                        dur: dur
                    });
                }
            },
            _canAccessIFrameCache = new Object(),
            _canAccessIFrame = function(iframe) {
                var result = false,
                    cacheKey = false,
                    html = null;
                if (iframe === undefined) {
                    cacheKey = "#empty";
                } else if ($(iframe).attr("id") !== undefined) {
                    cacheKey = $(iframe).attr("id");
                }
                if (cacheKey !== false && _canAccessIFrameCache[cacheKey] !== undefined) {
                    return _canAccessIFrameCache[cacheKey];
                }
                if (!iframe) {
                    try {
                        var doc = top.document;
                        html = doc.body.innerHTML;
                    } catch (err) {}
                    result = (html !== null);
                } else {
                    try {
                        var doc = iframe.contentDocument || iframe.contentWindow.document;
                        html = doc.body.innerHTML;
                    } catch (err) {}
                    result = (html !== null);
                }
                if (cacheKey !== false) {
                    _canAccessIFrameCache[cacheKey] = result;
                }
                return result;
            },
            _iframe = function(evt) {
                var el = this.find("iframe");
                if (!el.length) {
                    return;
                }
                var val = !evt ? "none" : "auto";
                el.css("pointer-events", val);
            },
            _disableMousewheel = function(el, target) {
                var tag = target.nodeName.toLowerCase(),
                    tags = el.data(pluginPfx).opt.mouseWheel.disableOver,
                    focusTags = ["select", "textarea"];
                return $.inArray(tag, tags) > -1 && !($.inArray(tag, focusTags) > -1 && !$(target).is(":focus"));
            },
            _draggerRail = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    namespace = pluginPfx + "_" + d.idx,
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    wrapper = mCSB_container.parent(),
                    mCSB_draggerContainer = $(".mCSB_" + d.idx + "_scrollbar ." + classes[12]),
                    clickable;
                mCSB_draggerContainer.bind("mousedown." + namespace + " touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace, function(e) {
                    touchActive = true;
                    if (!$(e.target).hasClass("mCSB_dragger")) {
                        clickable = 1;
                    }
                }).bind("touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace, function(e) {
                    touchActive = false;
                }).bind("click." + namespace, function(e) {
                    if (!clickable) {
                        return;
                    }
                    clickable = 0;
                    if ($(e.target).hasClass(classes[12]) || $(e.target).hasClass("mCSB_draggerRail")) {
                        _stop($this);
                        var el = $(this),
                            mCSB_dragger = el.find(".mCSB_dragger");
                        if (el.parent(".mCSB_scrollTools_horizontal").length > 0) {
                            if (!d.overflowed[1]) {
                                return;
                            }
                            var dir = "x",
                                clickDir = e.pageX > mCSB_dragger.offset().left ? -1 : 1,
                                to = Math.abs(mCSB_container[0].offsetLeft) - (clickDir * (wrapper.width() * 0.9));
                        } else {
                            if (!d.overflowed[0]) {
                                return;
                            }
                            var dir = "y",
                                clickDir = e.pageY > mCSB_dragger.offset().top ? -1 : 1,
                                to = Math.abs(mCSB_container[0].offsetTop) - (clickDir * (wrapper.height() * 0.9));
                        }
                        _scrollTo($this, to.toString(), {
                            dir: dir,
                            scrollEasing: "mcsEaseInOut"
                        });
                    }
                });
            },
            _focus = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    namespace = pluginPfx + "_" + d.idx,
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    wrapper = mCSB_container.parent();
                mCSB_container.bind("focusin." + namespace, function(e) {
                    var el = $(document.activeElement),
                        nested = mCSB_container.find(".mCustomScrollBox").length,
                        dur = 0;
                    if (!el.is(o.advanced.autoScrollOnFocus)) {
                        return;
                    }
                    _stop($this);
                    clearTimeout($this[0]._focusTimeout);
                    $this[0]._focusTimer = nested ? (dur + 17) * nested : 0;
                    $this[0]._focusTimeout = setTimeout(function() {
                        var to = [_childPos(el)[0], _childPos(el)[1]],
                            contentPos = [mCSB_container[0].offsetTop, mCSB_container[0].offsetLeft],
                            isVisible = [(contentPos[0] + to[0] >= 0 && contentPos[0] + to[0] < wrapper.height() - el.outerHeight(false)), (contentPos[1] + to[1] >= 0 && contentPos[0] + to[1] < wrapper.width() - el.outerWidth(false))],
                            overwrite = (o.axis === "yx" && !isVisible[0] && !isVisible[1]) ? "none" : "all";
                        if (o.axis !== "x" && !isVisible[0]) {
                            _scrollTo($this, to[0].toString(), {
                                dir: "y",
                                scrollEasing: "mcsEaseInOut",
                                overwrite: overwrite,
                                dur: dur
                            });
                        }
                        if (o.axis !== "y" && !isVisible[1]) {
                            _scrollTo($this, to[1].toString(), {
                                dir: "x",
                                scrollEasing: "mcsEaseInOut",
                                overwrite: overwrite,
                                dur: dur
                            });
                        }
                    }, $this[0]._focusTimer);
                });
            },
            _wrapperScroll = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    namespace = pluginPfx + "_" + d.idx,
                    wrapper = $("#mCSB_" + d.idx + "_container").parent();
                wrapper.bind("scroll." + namespace, function(e) {
                    if (wrapper.scrollTop() !== 0 || wrapper.scrollLeft() !== 0) {
                        $(".mCSB_" + d.idx + "_scrollbar").css("visibility", "hidden");
                    }
                });
            },
            _buttons = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    seq = d.sequential,
                    namespace = pluginPfx + "_" + d.idx,
                    sel = ".mCSB_" + d.idx + "_scrollbar",
                    btn = $(sel + ">a");
                btn.bind("contextmenu." + namespace, function(e) {
                    e.preventDefault();
                }).bind("mousedown." + namespace + " touchstart." + namespace + " pointerdown." + namespace + " MSPointerDown." + namespace + " mouseup." + namespace + " touchend." + namespace + " pointerup." + namespace + " MSPointerUp." + namespace + " mouseout." + namespace + " pointerout." + namespace + " MSPointerOut." + namespace + " click." + namespace, function(e) {
                    e.preventDefault();
                    if (!_mouseBtnLeft(e)) {
                        return;
                    }
                    var btnClass = $(this).attr("class");
                    seq.type = o.scrollButtons.scrollType;
                    switch (e.type) {
                        case "mousedown":
                        case "touchstart":
                        case "pointerdown":
                        case "MSPointerDown":
                            if (seq.type === "stepped") {
                                return;
                            }
                            touchActive = true;
                            d.tweenRunning = false;
                            _seq("on", btnClass);
                            break;
                        case "mouseup":
                        case "touchend":
                        case "pointerup":
                        case "MSPointerUp":
                        case "mouseout":
                        case "pointerout":
                        case "MSPointerOut":
                            if (seq.type === "stepped") {
                                return;
                            }
                            touchActive = false;
                            if (seq.dir) {
                                _seq("off", btnClass);
                            }
                            break;
                        case "click":
                            if (seq.type !== "stepped" || d.tweenRunning) {
                                return;
                            }
                            _seq("on", btnClass);
                            break;
                    }

                    function _seq(a, c) {
                        seq.scrollAmount = o.scrollButtons.scrollAmount;
                        _sequentialScroll($this, a, c);
                    }
                });
            },
            _keyboard = function() {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    seq = d.sequential,
                    namespace = pluginPfx + "_" + d.idx,
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    wrapper = mCSB_container.parent(),
                    editables = "input,textarea,select,datalist,keygen,[contenteditable='true']",
                    iframe = mCSB_container.find("iframe"),
                    events = ["blur." + namespace + " keydown." + namespace + " keyup." + namespace];
                if (iframe.length) {
                    iframe.each(function() {
                        $(this).bind("load", function() {
                            if (_canAccessIFrame(this)) {
                                $(this.contentDocument || this.contentWindow.document).bind(events[0], function(e) {
                                    _onKeyboard(e);
                                });
                            }
                        });
                    });
                }
                mCustomScrollBox.attr("tabindex", "0").bind(events[0], function(e) {
                    _onKeyboard(e);
                });

                function _onKeyboard(e) {
                    switch (e.type) {
                        case "blur":
                            if (d.tweenRunning && seq.dir) {
                                _seq("off", null);
                            }
                            break;
                        case "keydown":
                        case "keyup":
                            var code = e.keyCode ? e.keyCode : e.which,
                                action = "on";
                            if ((o.axis !== "x" && (code === 38 || code === 40)) || (o.axis !== "y" && (code === 37 || code === 39))) {
                                if (((code === 38 || code === 40) && !d.overflowed[0]) || ((code === 37 || code === 39) && !d.overflowed[1])) {
                                    return;
                                }
                                if (e.type === "keyup") {
                                    action = "off";
                                }
                                if (!$(document.activeElement).is(editables)) {
                                    e.preventDefault();
                                    e.stopImmediatePropagation();
                                    _seq(action, code);
                                }
                            } else if (code === 33 || code === 34) {
                                if (d.overflowed[0] || d.overflowed[1]) {
                                    e.preventDefault();
                                    e.stopImmediatePropagation();
                                }
                                if (e.type === "keyup") {
                                    _stop($this);
                                    var keyboardDir = code === 34 ? -1 : 1;
                                    if (o.axis === "x" || (o.axis === "yx" && d.overflowed[1] && !d.overflowed[0])) {
                                        var dir = "x",
                                            to = Math.abs(mCSB_container[0].offsetLeft) - (keyboardDir * (wrapper.width() * 0.9));
                                    } else {
                                        var dir = "y",
                                            to = Math.abs(mCSB_container[0].offsetTop) - (keyboardDir * (wrapper.height() * 0.9));
                                    }
                                    _scrollTo($this, to.toString(), {
                                        dir: dir,
                                        scrollEasing: "mcsEaseInOut"
                                    });
                                }
                            } else if (code === 35 || code === 36) {
                                if (!$(document.activeElement).is(editables)) {
                                    if (d.overflowed[0] || d.overflowed[1]) {
                                        e.preventDefault();
                                        e.stopImmediatePropagation();
                                    }
                                    if (e.type === "keyup") {
                                        if (o.axis === "x" || (o.axis === "yx" && d.overflowed[1] && !d.overflowed[0])) {
                                            var dir = "x",
                                                to = code === 35 ? Math.abs(wrapper.width() - mCSB_container.outerWidth(false)) : 0;
                                        } else {
                                            var dir = "y",
                                                to = code === 35 ? Math.abs(wrapper.height() - mCSB_container.outerHeight(false)) : 0;
                                        }
                                        _scrollTo($this, to.toString(), {
                                            dir: dir,
                                            scrollEasing: "mcsEaseInOut"
                                        });
                                    }
                                }
                            }
                            break;
                    }

                    function _seq(a, c) {
                        seq.type = o.keyboard.scrollType;
                        seq.scrollAmount = o.keyboard.scrollAmount;
                        if (seq.type === "stepped" && d.tweenRunning) {
                            return;
                        }
                        _sequentialScroll($this, a, c);
                    }
                }
            },
            _sequentialScroll = function(el, action, trigger, e, s) {
                var d = el.data(pluginPfx),
                    o = d.opt,
                    seq = d.sequential,
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    once = seq.type === "stepped" ? true : false,
                    steplessSpeed = o.scrollInertia < 26 ? 26 : o.scrollInertia,
                    steppedSpeed = o.scrollInertia < 1 ? 17 : o.scrollInertia;
                switch (action) {
                    case "on":
                        seq.dir = [(trigger === classes[16] || trigger === classes[15] || trigger === 39 || trigger === 37 ? "x" : "y"), (trigger === classes[13] || trigger === classes[15] || trigger === 38 || trigger === 37 ? -1 : 1)];
                        _stop(el);
                        if (_isNumeric(trigger) && seq.type === "stepped") {
                            return;
                        }
                        _on(once);
                        break;
                    case "off":
                        _off();
                        if (once || (d.tweenRunning && seq.dir)) {
                            _on(true);
                        }
                        break;
                }

                function _on(once) {
                    if (o.snapAmount) {
                        seq.scrollAmount = !(o.snapAmount instanceof Array) ? o.snapAmount : seq.dir[0] === "x" ? o.snapAmount[1] : o.snapAmount[0];
                    }
                    var c = seq.type !== "stepped",
                        t = s ? s : !once ? 1000 / 60 : c ? steplessSpeed / 1.5 : steppedSpeed,
                        m = !once ? 2.5 : c ? 7.5 : 40,
                        contentPos = [Math.abs(mCSB_container[0].offsetTop), Math.abs(mCSB_container[0].offsetLeft)],
                        ratio = [d.scrollRatio.y > 10 ? 10 : d.scrollRatio.y, d.scrollRatio.x > 10 ? 10 : d.scrollRatio.x],
                        amount = seq.dir[0] === "x" ? contentPos[1] + (seq.dir[1] * (ratio[1] * m)) : contentPos[0] + (seq.dir[1] * (ratio[0] * m)),
                        px = seq.dir[0] === "x" ? contentPos[1] + (seq.dir[1] * parseInt(seq.scrollAmount)) : contentPos[0] + (seq.dir[1] * parseInt(seq.scrollAmount)),
                        to = seq.scrollAmount !== "auto" ? px : amount,
                        easing = e ? e : !once ? "mcsLinear" : c ? "mcsLinearOut" : "mcsEaseInOut",
                        onComplete = !once ? false : true;
                    if (once && t < 17) {
                        to = seq.dir[0] === "x" ? contentPos[1] : contentPos[0];
                    }
                    _scrollTo(el, to.toString(), {
                        dir: seq.dir[0],
                        scrollEasing: easing,
                        dur: t,
                        onComplete: onComplete
                    });
                    if (once) {
                        seq.dir = false;
                        return;
                    }
                    clearTimeout(seq.step);
                    seq.step = setTimeout(function() {
                        _on();
                    }, t);
                }

                function _off() {
                    clearTimeout(seq.step);
                    _delete(seq, "step");
                    _stop(el);
                }
            },
            _arr = function(val) {
                var o = $(this).data(pluginPfx).opt,
                    vals = [];
                if (typeof val === "function") {
                    val = val();
                }
                if (!(val instanceof Array)) {
                    vals[0] = val.y ? val.y : val.x || o.axis === "x" ? null : val;
                    vals[1] = val.x ? val.x : val.y || o.axis === "y" ? null : val;
                } else {
                    vals = val.length > 1 ? [val[0], val[1]] : o.axis === "x" ? [null, val[0]] : [val[0], null];
                }
                if (typeof vals[0] === "function") {
                    vals[0] = vals[0]();
                }
                if (typeof vals[1] === "function") {
                    vals[1] = vals[1]();
                }
                return vals;
            },
            _to = function(val, dir) {
                if (val == null || typeof val == "undefined") {
                    return;
                }
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    wrapper = mCSB_container.parent(),
                    t = typeof val;
                if (!dir) {
                    dir = o.axis === "x" ? "x" : "y";
                }
                var contentLength = dir === "x" ? mCSB_container.outerWidth(false) - wrapper.width() : mCSB_container.outerHeight(false) - wrapper.height(),
                    contentPos = dir === "x" ? mCSB_container[0].offsetLeft : mCSB_container[0].offsetTop,
                    cssProp = dir === "x" ? "left" : "top";
                switch (t) {
                    case "function":
                        return val();
                        break;
                    case "object":
                        var obj = val.jquery ? val : $(val);
                        if (!obj.length) {
                            return;
                        }
                        return dir === "x" ? _childPos(obj)[1] : _childPos(obj)[0];
                        break;
                    case "string":
                    case "number":
                        if (_isNumeric(val)) {
                            return Math.abs(val);
                        } else if (val.indexOf("%") !== -1) {
                            return Math.abs(contentLength * parseInt(val) / 100);
                        } else if (val.indexOf("-=") !== -1) {
                            return Math.abs(contentPos - parseInt(val.split("-=")[1]));
                        } else if (val.indexOf("+=") !== -1) {
                            var p = (contentPos + parseInt(val.split("+=")[1]));
                            return p >= 0 ? 0 : Math.abs(p);
                        } else if (val.indexOf("px") !== -1 && _isNumeric(val.split("px")[0])) {
                            return Math.abs(val.split("px")[0]);
                        } else {
                            if (val === "top" || val === "left") {
                                return 0;
                            } else if (val === "bottom") {
                                return Math.abs(wrapper.height() - mCSB_container.outerHeight(false));
                            } else if (val === "right") {
                                return Math.abs(wrapper.width() - mCSB_container.outerWidth(false));
                            } else if (val === "first" || val === "last") {
                                var obj = mCSB_container.find(":" + val);
                                return dir === "x" ? _childPos(obj)[1] : _childPos(obj)[0];
                            } else {
                                if ($(val).length) {
                                    return dir === "x" ? _childPos($(val))[1] : _childPos($(val))[0];
                                } else {
                                    mCSB_container.css(cssProp, val);
                                    methods.update.call(null, $this[0]);
                                    return;
                                }
                            }
                        }
                        break;
                }
            },
            _autoUpdate = function(rem) {
                var $this = $(this),
                    d = $this.data(pluginPfx),
                    o = d.opt,
                    mCSB_container = $("#mCSB_" + d.idx + "_container");
                if (rem) {
                    clearTimeout(mCSB_container[0].autoUpdate);
                    _delete(mCSB_container[0], "autoUpdate");
                    return;
                }
                upd();

                function upd() {
                    clearTimeout(mCSB_container[0].autoUpdate);
                    if ($this.parents("html").length === 0) {
                        $this = null;
                        return;
                    }
                    mCSB_container[0].autoUpdate = setTimeout(function() {
                        if (o.advanced.updateOnSelectorChange) {
                            d.poll.change.n = sizesSum();
                            if (d.poll.change.n !== d.poll.change.o) {
                                d.poll.change.o = d.poll.change.n;
                                doUpd(3);
                                return;
                            }
                        }
                        if (o.advanced.updateOnContentResize) {
                            d.poll.size.n = $this[0].scrollHeight + $this[0].scrollWidth + mCSB_container[0].offsetHeight + $this[0].offsetHeight + $this[0].offsetWidth;
                            if (d.poll.size.n !== d.poll.size.o) {
                                d.poll.size.o = d.poll.size.n;
                                doUpd(1);
                                return;
                            }
                        }
                        if (o.advanced.updateOnImageLoad) {
                            if (!(o.advanced.updateOnImageLoad === "auto" && o.axis === "y")) {
                                d.poll.img.n = mCSB_container.find("img").length;
                                if (d.poll.img.n !== d.poll.img.o) {
                                    d.poll.img.o = d.poll.img.n;
                                    mCSB_container.find("img").each(function() {
                                        imgLoader(this);
                                    });
                                    return;
                                }
                            }
                        }
                        if (o.advanced.updateOnSelectorChange || o.advanced.updateOnContentResize || o.advanced.updateOnImageLoad) {
                            upd();
                        }
                    }, o.advanced.autoUpdateTimeout);
                }

                function imgLoader(el) {
                    if ($(el).hasClass(classes[2])) {
                        doUpd();
                        return;
                    }
                    var img = new Image();

                    function createDelegate(contextObject, delegateMethod) {
                        return function() {
                            return delegateMethod.apply(contextObject, arguments);
                        }
                    }

                    function imgOnLoad() {
                        this.onload = null;
                        $(el).addClass(classes[2]);
                        doUpd(2);
                    }
                    img.onload = createDelegate(img, imgOnLoad);
                    img.src = el.src;
                }

                function sizesSum() {
                    if (o.advanced.updateOnSelectorChange === true) {
                        o.advanced.updateOnSelectorChange = "*";
                    }
                    var total = 0,
                        sel = mCSB_container.find(o.advanced.updateOnSelectorChange);
                    if (o.advanced.updateOnSelectorChange && sel.length > 0) {
                        sel.each(function() {
                            total += this.offsetHeight + this.offsetWidth;
                        });
                    }
                    return total;
                }

                function doUpd(cb) {
                    clearTimeout(mCSB_container[0].autoUpdate);
                    methods.update.call(null, $this[0], cb);
                }
            },
            _snapAmount = function(to, amount, offset) {
                return (Math.round(to / amount) * amount - offset);
            },
            _stop = function(el) {
                var d = el.data(pluginPfx),
                    sel = $("#mCSB_" + d.idx + "_container,#mCSB_" + d.idx + "_container_wrapper,#mCSB_" + d.idx + "_dragger_vertical,#mCSB_" + d.idx + "_dragger_horizontal");
                sel.each(function() {
                    _stopTween.call(this);
                });
            },
            _scrollTo = function(el, to, options) {
                var d = el.data(pluginPfx),
                    o = d.opt,
                    defaults = {
                        trigger: "internal",
                        dir: "y",
                        scrollEasing: "mcsEaseOut",
                        drag: false,
                        dur: o.scrollInertia,
                        overwrite: "all",
                        callbacks: true,
                        onStart: true,
                        onUpdate: true,
                        onComplete: true
                    },
                    options = $.extend(defaults, options),
                    dur = [options.dur, (options.drag ? 0 : options.dur)],
                    mCustomScrollBox = $("#mCSB_" + d.idx),
                    mCSB_container = $("#mCSB_" + d.idx + "_container"),
                    wrapper = mCSB_container.parent(),
                    totalScrollOffsets = o.callbacks.onTotalScrollOffset ? _arr.call(el, o.callbacks.onTotalScrollOffset) : [0, 0],
                    totalScrollBackOffsets = o.callbacks.onTotalScrollBackOffset ? _arr.call(el, o.callbacks.onTotalScrollBackOffset) : [0, 0];
                d.trigger = options.trigger;
                if (wrapper.scrollTop() !== 0 || wrapper.scrollLeft() !== 0) {
                    $(".mCSB_" + d.idx + "_scrollbar").css("visibility", "visible");
                    wrapper.scrollTop(0).scrollLeft(0);
                }
                if (to === "_resetY" && !d.contentReset.y) {
                    if (_cb("onOverflowYNone")) {
                        o.callbacks.onOverflowYNone.call(el[0]);
                    }
                    d.contentReset.y = 1;
                }
                if (to === "_resetX" && !d.contentReset.x) {
                    if (_cb("onOverflowXNone")) {
                        o.callbacks.onOverflowXNone.call(el[0]);
                    }
                    d.contentReset.x = 1;
                }
                if (to === "_resetY" || to === "_resetX") {
                    return;
                }
                if ((d.contentReset.y || !el[0].mcs) && d.overflowed[0]) {
                    if (_cb("onOverflowY")) {
                        o.callbacks.onOverflowY.call(el[0]);
                    }
                    d.contentReset.x = null;
                }
                if ((d.contentReset.x || !el[0].mcs) && d.overflowed[1]) {
                    if (_cb("onOverflowX")) {
                        o.callbacks.onOverflowX.call(el[0]);
                    }
                    d.contentReset.x = null;
                }
                if (o.snapAmount) {
                    var snapAmount = !(o.snapAmount instanceof Array) ? o.snapAmount : options.dir === "x" ? o.snapAmount[1] : o.snapAmount[0];
                    to = _snapAmount(to, snapAmount, o.snapOffset);
                }
                switch (options.dir) {
                    case "x":
                        var mCSB_dragger = $("#mCSB_" + d.idx + "_dragger_horizontal"),
                            property = "left",
                            contentPos = mCSB_container[0].offsetLeft,
                            limit = [mCustomScrollBox.width() - mCSB_container.outerWidth(false), mCSB_dragger.parent().width() - mCSB_dragger.width()],
                            scrollTo = [to, to === 0 ? 0 : (to / d.scrollRatio.x)],
                            tso = totalScrollOffsets[1],
                            tsbo = totalScrollBackOffsets[1],
                            totalScrollOffset = tso > 0 ? tso / d.scrollRatio.x : 0,
                            totalScrollBackOffset = tsbo > 0 ? tsbo / d.scrollRatio.x : 0;
                        break;
                    case "y":
                        var mCSB_dragger = $("#mCSB_" + d.idx + "_dragger_vertical"),
                            property = "top",
                            contentPos = mCSB_container[0].offsetTop,
                            limit = [mCustomScrollBox.height() - mCSB_container.outerHeight(false), mCSB_dragger.parent().height() - mCSB_dragger.height()],
                            scrollTo = [to, to === 0 ? 0 : (to / d.scrollRatio.y)],
                            tso = totalScrollOffsets[0],
                            tsbo = totalScrollBackOffsets[0],
                            totalScrollOffset = tso > 0 ? tso / d.scrollRatio.y : 0,
                            totalScrollBackOffset = tsbo > 0 ? tsbo / d.scrollRatio.y : 0;
                        break;
                }
                if (scrollTo[1] < 0 || (scrollTo[0] === 0 && scrollTo[1] === 0)) {
                    scrollTo = [0, 0];
                } else if (scrollTo[1] >= limit[1]) {
                    scrollTo = [limit[0], limit[1]];
                } else {
                    scrollTo[0] = -scrollTo[0];
                }
                if (!el[0].mcs) {
                    _mcs();
                    if (_cb("onInit")) {
                        o.callbacks.onInit.call(el[0]);
                    }
                }
                clearTimeout(mCSB_container[0].onCompleteTimeout);
                _tweenTo(mCSB_dragger[0], property, Math.round(scrollTo[1]), dur[1], options.scrollEasing);
                if (!d.tweenRunning && ((contentPos === 0 && scrollTo[0] >= 0) || (contentPos === limit[0] && scrollTo[0] <= limit[0]))) {
                    return;
                }
                _tweenTo(mCSB_container[0], property, Math.round(scrollTo[0]), dur[0], options.scrollEasing, options.overwrite, {
                    onStart: function() {
                        if (options.callbacks && options.onStart && !d.tweenRunning) {
                            if (_cb("onScrollStart")) {
                                _mcs();
                                o.callbacks.onScrollStart.call(el[0]);
                            }
                            d.tweenRunning = true;
                            _onDragClasses(mCSB_dragger);
                            d.cbOffsets = _cbOffsets();
                        }
                    },
                    onUpdate: function() {
                        if (options.callbacks && options.onUpdate) {
                            if (_cb("whileScrolling")) {
                                _mcs();
                                o.callbacks.whileScrolling.call(el[0]);
                            }
                        }
                    },
                    onComplete: function() {
                        if (options.callbacks && options.onComplete) {
                            if (o.axis === "yx") {
                                clearTimeout(mCSB_container[0].onCompleteTimeout);
                            }
                            var t = mCSB_container[0].idleTimer || 0;
                            mCSB_container[0].onCompleteTimeout = setTimeout(function() {
                                if (_cb("onScroll")) {
                                    _mcs();
                                    o.callbacks.onScroll.call(el[0]);
                                }
                                if (_cb("onTotalScroll") && scrollTo[1] >= limit[1] - totalScrollOffset && d.cbOffsets[0]) {
                                    _mcs();
                                    o.callbacks.onTotalScroll.call(el[0]);
                                }
                                if (_cb("onTotalScrollBack") && scrollTo[1] <= totalScrollBackOffset && d.cbOffsets[1]) {
                                    _mcs();
                                    o.callbacks.onTotalScrollBack.call(el[0]);
                                }
                                d.tweenRunning = false;
                                mCSB_container[0].idleTimer = 0;
                                _onDragClasses(mCSB_dragger, "hide");
                            }, t);
                        }
                    }
                });

                function _cb(cb) {
                    return d && o.callbacks[cb] && typeof o.callbacks[cb] === "function";
                }

                function _cbOffsets() {
                    return [o.callbacks.alwaysTriggerOffsets || contentPos >= limit[0] + tso, o.callbacks.alwaysTriggerOffsets || contentPos <= -tsbo];
                }

                function _mcs() {
                    var cp = [mCSB_container[0].offsetTop, mCSB_container[0].offsetLeft],
                        dp = [mCSB_dragger[0].offsetTop, mCSB_dragger[0].offsetLeft],
                        cl = [mCSB_container.outerHeight(false), mCSB_container.outerWidth(false)],
                        pl = [mCustomScrollBox.height(), mCustomScrollBox.width()];
                    el[0].mcs = {
                        content: mCSB_container,
                        top: cp[0],
                        left: cp[1],
                        draggerTop: dp[0],
                        draggerLeft: dp[1],
                        topPct: Math.round((100 * Math.abs(cp[0])) / (Math.abs(cl[0]) - pl[0])),
                        leftPct: Math.round((100 * Math.abs(cp[1])) / (Math.abs(cl[1]) - pl[1])),
                        direction: options.dir
                    };
                }
            },
            _tweenTo = function(el, prop, to, duration, easing, overwrite, callbacks) {
                if (!el._mTween) {
                    el._mTween = {
                        top: {},
                        left: {}
                    };
                }
                var callbacks = callbacks || {},
                    onStart = callbacks.onStart || function() {},
                    onUpdate = callbacks.onUpdate || function() {},
                    onComplete = callbacks.onComplete || function() {},
                    startTime = _getTime(),
                    _delay, progress = 0,
                    from = el.offsetTop,
                    elStyle = el.style,
                    _request, tobj = el._mTween[prop];
                if (prop === "left") {
                    from = el.offsetLeft;
                }
                var diff = to - from;
                tobj.stop = 0;
                if (overwrite !== "none") {
                    _cancelTween();
                }
                _startTween();

                function _step() {
                    if (tobj.stop) {
                        return;
                    }
                    if (!progress) {
                        onStart.call();
                    }
                    progress = _getTime() - startTime;
                    _tween();
                    if (progress >= tobj.time) {
                        tobj.time = (progress > tobj.time) ? progress + _delay - (progress - tobj.time) : progress + _delay - 1;
                        if (tobj.time < progress + 1) {
                            tobj.time = progress + 1;
                        }
                    }
                    if (tobj.time < duration) {
                        tobj.id = _request(_step);
                    } else {
                        onComplete.call();
                    }
                }

                function _tween() {
                    if (duration > 0) {
                        tobj.currVal = _ease(tobj.time, from, diff, duration, easing);
                        elStyle[prop] = Math.round(tobj.currVal) + "px";
                    } else {
                        elStyle[prop] = to + "px";
                    }
                    onUpdate.call();
                }

                function _startTween() {
                    _delay = 1000 / 60;
                    tobj.time = progress + _delay;
                    _request = (!window.requestAnimationFrame) ? function(f) {
                        _tween();
                        return setTimeout(f, 0.01);
                    } : window.requestAnimationFrame;
                    tobj.id = _request(_step);
                }

                function _cancelTween() {
                    if (tobj.id == null) {
                        return;
                    }
                    if (!window.requestAnimationFrame) {
                        clearTimeout(tobj.id);
                    } else {
                        window.cancelAnimationFrame(tobj.id);
                    }
                    tobj.id = null;
                }

                function _ease(t, b, c, d, type) {
                    switch (type) {
                        case "linear":
                        case "mcsLinear":
                            return c * t / d + b;
                            break;
                        case "mcsLinearOut":
                            t /= d;
                            t--;
                            return c * Math.sqrt(1 - t * t) + b;
                            break;
                        case "easeInOutSmooth":
                            t /= d / 2;
                            if (t < 1) return c / 2 * t * t + b;
                            t--;
                            return -c / 2 * (t * (t - 2) - 1) + b;
                            break;
                        case "easeInOutStrong":
                            t /= d / 2;
                            if (t < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
                            t--;
                            return c / 2 * (-Math.pow(2, -10 * t) + 2) + b;
                            break;
                        case "easeInOut":
                        case "mcsEaseInOut":
                            t /= d / 2;
                            if (t < 1) return c / 2 * t * t * t + b;
                            t -= 2;
                            return c / 2 * (t * t * t + 2) + b;
                            break;
                        case "easeOutSmooth":
                            t /= d;
                            t--;
                            return -c * (t * t * t * t - 1) + b;
                            break;
                        case "easeOutStrong":
                            return c * (-Math.pow(2, -10 * t / d) + 1) + b;
                            break;
                        case "easeOut":
                        case "mcsEaseOut":
                        default:
                            var ts = (t /= d) * t,
                                tc = ts * t;
                            return b + c * (0.499999999999997 * tc * ts + -2.5 * ts * ts + 5.5 * tc + -6.5 * ts + 4 * t);
                    }
                }
            },
            _getTime = function() {
                if (window.performance && window.performance.now) {
                    return window.performance.now();
                } else {
                    if (window.performance && window.performance.webkitNow) {
                        return window.performance.webkitNow();
                    } else {
                        if (Date.now) {
                            return Date.now();
                        } else {
                            return new Date().getTime();
                        }
                    }
                }
            },
            _stopTween = function() {
                var el = this;
                if (!el._mTween) {
                    el._mTween = {
                        top: {},
                        left: {}
                    };
                }
                var props = ["top", "left"];
                for (var i = 0; i < props.length; i++) {
                    var prop = props[i];
                    if (el._mTween[prop].id) {
                        if (!window.requestAnimationFrame) {
                            clearTimeout(el._mTween[prop].id);
                        } else {
                            window.cancelAnimationFrame(el._mTween[prop].id);
                        }
                        el._mTween[prop].id = null;
                        el._mTween[prop].stop = 1;
                    }
                }
            },
            _delete = function(c, m) {
                try {
                    delete c[m];
                } catch (e) {
                    c[m] = null;
                }
            },
            _mouseBtnLeft = function(e) {
                return !(e.which && e.which !== 1);
            },
            _pointerTouch = function(e) {
                var t = e.originalEvent.pointerType;
                return !(t && t !== "touch" && t !== 2);
            },
            _isNumeric = function(val) {
                return !isNaN(parseFloat(val)) && isFinite(val);
            },
            _childPos = function(el) {
                var p = el.parents(".mCSB_container");
                return [el.offset().top - p.offset().top, el.offset().left - p.offset().left];
            },
            _isTabHidden = function() {
                var prop = _getHiddenProp();
                if (!prop) return false;
                return document[prop];

                function _getHiddenProp() {
                    var pfx = ["webkit", "moz", "ms", "o"];
                    if ("hidden" in document) return "hidden";
                    for (var i = 0; i < pfx.length; i++) {
                        if ((pfx[i] + "Hidden") in document)
                            return pfx[i] + "Hidden";
                    }
                    return null;
                }
            };
        $.fn[pluginNS] = function(method) {
            if (methods[method]) {
                return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
            } else if (typeof method === "object" || !method) {
                return methods.init.apply(this, arguments);
            } else {
                $.error("Method " + method + " does not exist");
            }
        };
        $[pluginNS] = function(method) {
            if (methods[method]) {
                return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
            } else if (typeof method === "object" || !method) {
                return methods.init.apply(this, arguments);
            } else {
                $.error("Method " + method + " does not exist");
            }
        };
        $[pluginNS].defaults = defaults;
        window[pluginNS] = true;
        $(window).bind("load", function() {
            $(defaultSelector)[pluginNS]();
            $.extend($.expr[":"], {
                mcsInView: $.expr[":"].mcsInView || function(el) {
                    var $el = $(el),
                        content = $el.parents(".mCSB_container"),
                        wrapper, cPos;
                    if (!content.length) {
                        return;
                    }
                    wrapper = content.parent();
                    cPos = [content[0].offsetTop, content[0].offsetLeft];
                    return cPos[0] + _childPos($el)[0] >= 0 && cPos[0] + _childPos($el)[0] < wrapper.height() - $el.outerHeight(false) && cPos[1] + _childPos($el)[1] >= 0 && cPos[1] + _childPos($el)[1] < wrapper.width() - $el.outerWidth(false);
                },
                mcsInSight: $.expr[":"].mcsInSight || function(el, i, m) {
                    var $el = $(el),
                        elD, content = $el.parents(".mCSB_container"),
                        wrapperView, pos, wrapperViewPct, pctVals = m[3] === "exact" ? [
                            [1, 0],
                            [1, 0]
                        ] : [
                            [0.9, 0.1],
                            [0.6, 0.4]
                        ];
                    if (!content.length) {
                        return;
                    }
                    elD = [$el.outerHeight(false), $el.outerWidth(false)];
                    pos = [content[0].offsetTop + _childPos($el)[0], content[0].offsetLeft + _childPos($el)[1]];
                    wrapperView = [content.parent()[0].offsetHeight, content.parent()[0].offsetWidth];
                    wrapperViewPct = [elD[0] < wrapperView[0] ? pctVals[0] : pctVals[1], elD[1] < wrapperView[1] ? pctVals[0] : pctVals[1]];
                    return pos[0] - (wrapperView[0] * wrapperViewPct[0][0]) < 0 && pos[0] + elD[0] - (wrapperView[0] * wrapperViewPct[0][1]) >= 0 && pos[1] - (wrapperView[1] * wrapperViewPct[1][0]) < 0 && pos[1] + elD[1] - (wrapperView[1] * wrapperViewPct[1][1]) >= 0;
                },
                mcsOverflow: $.expr[":"].mcsOverflow || function(el) {
                    var d = $(el).data(pluginPfx);
                    if (!d) {
                        return;
                    }
                    return d.overflowed[0] || d.overflowed[1];
                }
            });
        });
    }))
}));
(jQuery);
(function($) {
    $(document).ready(function() {
        var strips = $(".strips-container");

        function initialiseStripsScroll() {
            strips.mCustomScrollbar({
                axis: 'x',
                scrollInertia: 80,
                advanced: {
                    updateOnContentResize: true,
                }
            });
        }

        function updateStrips() {
            var vw = $(window).innerWidth();
            if (vw < 700) {
                if (strips.hasClass('mCustomScrollbar')) {
                    strips.mCustomScrollbar('destroy');
                }
            } else {
                if (!strips.hasClass('mCustomScrollbar')) {
                    initialiseStripsScroll();
                }
                setTimeout(function() {
                    if (strips.hasClass('mCustomScrollbar')) {
                        strips.mCustomScrollbar('scrollTo', 0);
                        strips.mCustomScrollbar('update');
                    }
                }, 100);
            }
        }
        updateStrips();
        $(window).on('resize', function() {
            vw = $(window).innerWidth();
            updateStrips();
        });

        function medsFilter(el) {
            var _this = $(this);
            _this.mobileFilterButton = $(el).find('.toggle-med-filters.button');
            _this.gradFilters = $(el).find('.med-filters');
            _this.gradFiltersWrapper = $(el).find('.med-filters-wrapper');
            _this.filterButtons = $(el).find('.menu-item');
            _this.meds = $('.single-grad');
            _this.showmedsOfClass = function(filterClass) {
                if (filterClass == 'all') {
                    _this.meds.addClass('active')
                    return _this;
                }
                _this.meds.removeClass('active');
                _this.meds.addClass('hide');
                setTimeout(function() {
                    _this.meds.filter('.' + filterClass).each(function() {
                        $(this).addClass('active');
                        $(this).prependTo($(this).parents('.strip'));
                    });
                }, 400);
                setTimeout(function() {
                    _this.meds.removeClass('hide');
                }, 600);
                return _this;
            }
            _this.setActiveFilter = function(el) {
                _this.filterButtons.filter('.active').removeClass('active');
                $(el).addClass('active');
                return _this;
            }
            _this.openMobileFilters = function() {
                _this.gradFiltersWrapper.show();
                $('body').addClass('hide-header').addClass('hide-overflow');
                setTimeout(function() {
                    _this.gradFiltersWrapper.addClass('visible');
                }, 50);
            }
            _this.closeMobileFilters = function() {
                $('body').removeClass('hide-header').removeClass('hide-overflow');
                _this.gradFiltersWrapper.removeClass('visible');
                setTimeout(function() {
                    _this.gradFiltersWrapper.hide();
                }, 400);
            }
            _this.mobileFilterButton.click(function(e) {
                if (!_this.gradFiltersWrapper.hasClass('visible')) {
                    _this.openMobileFilters();
                } else {
                    _this.closeMobileFilters();
                }
            });
            _this.filterButtons.click(function(e) {
                if (!$(this).hasClass('active')) {
                    _this.setActiveFilter(this).showmedsOfClass($(this).data('filter-class'));
                    _this.mobileFilterButton.html('Filter: ' + $(this).text());
                    if (strips.hasClass('mCustomScrollbar')) {
                        strips.mCustomScrollbar('scrollTo', 0);
                    }
                }
                if ($(this).parents('.med-filters-wrapper').hasClass('visible')) {
                    _this.closeMobileFilters();
                }
            });
            _this.gradFiltersWrapper.click(function(e) {
                if ($(e.target).hasClass('visible')) {
                    _this.closeMobileFilters();
                }
            });
        }
        var gradFilter = new medsFilter('.med-filters-container');
    });
})(jQuery);
(function($) {
    $(document).ready(function() {
        function initialiseWorkPage(workContentContainer) {
            var _this = this;
            if (!workContentContainer) {
                var workContentContainer = $('body');
            }
            this.workContent = $(workContentContainer).find('.work-content');
            this.carousel = workContentContainer.find('.work-carousel').slick({
                infinite: false,
                autoplay: false,
                arrows: false,
                swipeToSlide: true,
                dots: true,
                nextArrow: '<span class="slick-next">Next</span>',
                prevArrow: '<span class="slick-prev">Prev</span>',
            });
            this.carousel.find('.work-carousel-item').click(function(e) {
                _this.carousel.slick('slickGoTo', $(this).index());
            });
            $(workContentContainer).find('.mt-close-work').click(function(e) {
                e.preventDefault();
                window.history.back();
            });
            this.workContent.addClass('loaded');
        }

        function medProfile(profileIdentifier) {
            var _this = this;
            this.profile = $(profileIdentifier);
            this.inTransition = false;
            this.profileContent = this.profile.find('.right-panel');
            this.gradImage = this.profile.find('.grad-image');
            this.profileScrollPosition = null;
            this.workStrips = this.profile.find('.work-strip');
            this.worksContainer = $('.detailed-works');
            this.currentWork = null;
            this.hideProfile = function() {
                this.profile.addClass('show-work');
                this.profile.addClass('hide-profile-content');
                setTimeout(function() {
                    _this.profileContent.hide();
                }, 400);
            }
            this.unhideProfile = function() {
                $("html, body").animate({
                    scrollTop: 0
                });
                this.profileContent.show();
                this.profile.removeClass('show-work');
                setTimeout(function() {
                    _this.profile.removeClass('hide-profile-content');
                }, 400);
            }
            this.closeWorks = function() {
                this.currentWork = null;
                this.profile.addClass('hide-detailed-works');
                this.hideWorks();
                setTimeout(function() {
                    _this.worksContainer.hide();
                }, 600);
                setTimeout(function() {
                    _this.unhideProfile();
                }, 300);
            }
            this.showWork = function(workID) {
                var thisWork = this.worksContainer.find('.work-' + workID);
                var thisWorkCarousel = thisWork.find('.work-carousel');
                this.currentWork = workID;
                thisWork.show();
                setTimeout(function() {
                    thisWork.addClass('view');
                }, 50);
            }
            this.hideWorks = function() {
                var works = this.worksContainer.find('.work-container');
                works.removeClass('view');
                setTimeout(function() {
                    works.hide();
                }, 400);
            }
            this.openWorks = function() {
                _this.hideProfile();
                this.worksContainer.show();
                setTimeout(function() {
                    _this.profile.removeClass('hide-detailed-works');
                }, 50);
            }
            this.loadWork = function(workID) {
                var thisWork = this.worksContainer.find('.work-' + workID);
                if (thisWork.length == 0) {
                    var workURL = $('a[data-work-id="' + workID + '"]').attr('href');
                    var workContent;
                    this.worksContainer.append('<div class="work-container work-' + workID + '"></div>');
                    thisWork = $('.detailed-works .work-' + workID);
                    thisWork.load(workURL + ' .work-content', function() {
                        _this.showWork(workID);
                        initialiseWorkPage(thisWork);
                    });
                } else {
                    _this.showWork(workID);
                }
            }
            this.goToWork = function(workID, shouldPushState) {
                $("html, body").animate({
                    scrollTop: 0
                });
                if (workID == null || workID == undefined) {
                    if (shouldPushState === true) {
                        history.pushState({
                            work: null
                        }, 'Profile');
                    }
                    this.closeWorks();
                } else {
                    if (shouldPushState === true) {
                        history.pushState({
                            work: workID
                        }, 'Work ' + workID);
                    }
                    this.openWorks();
                    this.loadWork(workID);
                }
            }
            window.onpopstate = function(event) {
                if (event.state) {
                    _this.goToWork(event.state.work, false);
                } else {
                    _this.goToWork(null, false);
                }
            }
            this.updatemedProfileBlur = function() {
                this.profileScrollPosition = $(window).scrollTop();
                if (_this.profileScrollPosition <= 50) {
                    $('#workJS').removeClass('work-show');
                    $('#leftPanelJS').removeClass('work-show');
                } else {
                    $('#workJS').addClass('work-show');
                    $('#leftPanelJS').addClass('work-show');
                }
            }
            $(window).scroll(function() {
                _this.updatemedProfileBlur();
            });
            this.updatemedProfileBlur();
            this.workStrips.click(function(e) {
                e.preventDefault();
                _this.goToWork($(this).data('work-id'), true);
            });
        }
        if ($('#med-profile').length) {
            var medProfile = new medProfile(('#med-profile'));
        }
        if ($('.single-work').length) {
            initialiseWorkPage();
        }
    });
})(jQuery);
$(document).ready(function() {
    $('body').addClass('loaded');
    var navInTransition = false;

    function openMobileMenu() {
        if (!navInTransition) {
            navInTransition = !navInTransition;
            $('#primary-navigation-menu').show();
            setTimeout(function() {
                $('body').addClass('show-mobile-menu');
                navInTransition = !navInTransition;
            }, 50);
        }
    }

    function closeMobileMenu() {
        if (!navInTransition) {
            navInTransition = !navInTransition;
            $('body').removeClass('show-mobile-menu');
            setTimeout(function() {
                $('#primary-navigation-menu').hide();
                navInTransition = !navInTransition;
            }, 400);
        }
    }
    $('.toggle-mobile-menu').click(function(e) {
        if (!$('body').hasClass('show-mobile-menu')) {
            openMobileMenu();
        } else {
            closeMobileMenu();
        }
    });
    $('#primary-navigation-menu').click(function(e) {
        if ($(window).innerWidth() < 700 && e.target == this) {
            console.log('yeh');
            closeMobileMenu();
        }
    });
    $('.mt-workface-switch').click(function(e) {
        $(this).toggleClass('show-face');
        $('.left-panel').toggleClass('hide-work');
    });

    function Polygon(svg) {
        this.arm = {
            node: svg.find('polyline.a'),
            points: [],
        };
        this.reflection = {
            node: svg.find('polyline.b'),
            points: [],
        };
        this.a.points = svg.find('polyline.a').attr('points').split(' ');
        this.b.points = svg.find('polyline.b').attr('points').split(' ');
    }
    var scene = $('.scene').parallax();

    function updateDepths() {
        var w = $(document).innerWidth();
        var lastState;
        if (w > 768) {
            if (lastState != 'desktop') {
                lastState = 'desktop';
                $('.layer').each(function() {
                    $(this).attr('data-depth', $(this).data('desktop-depth'));
                    scene.parallax('scalar', 2, 0);
                    scene.parallax('updateLayers');
                });
            }
        } else {
            if (lastState != 'mobile') {
                lastState = 'mobile';
                $('.layer').each(function() {
                    $(this).attr('data-depth', $(this).data('mobile-depth'));
                    scene.parallax('scalar', 20, 0);
                    scene.parallax('updateLayers');
                });
            }
        }
    }
    updateDepths();
    $(window).resize(updateDepths);

    function hideVideoOnMobile() {
        var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
        if (iOS) {
            $('video').hide();
            $('body').addClass('iOs');
        }
    }
    hideVideoOnMobile();

    function watchSeen($collection) {
        var scroll = $(document).scrollTop();
        var wh = $(window).innerHeight();
        $.each($collection, function() {
            var $this = $(this);
            var elTop = $this.offset().top;
            var elBottom = elTop + $this.outerHeight();
            if ((elTop >= scroll && elTop <= scroll + wh) || (elBottom >= scroll && elBottom <= scroll + wh)) {
                $this.addClass('seen');
            }
        });
        return $collection;
    }
    var $scrollBasedAnimates = $('.panel-bridge, .horizon-rule, h2, .next-med, .animate-when-seen');
    watchSeen($scrollBasedAnimates);
    $(window).scroll(function() {
        watchSeen($scrollBasedAnimates);
    });
});
